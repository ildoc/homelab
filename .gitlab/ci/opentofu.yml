---
stages:
  - validate
  - plan
  - apply

# Variabili globali per tutti i job
variables:
  # Variabili per OpenTofu
  VAULT_ADDR: "http://vault:8200"

  # Altre variabili globali
  GIT_STRATEGY: fetch

  TOFU_VERSION: "1.6.0"
  TF_STATE_NAME: "pihole-dns"
  TOFU_DIR: "opentofu"  # Directory che contiene i file OpenTofu

# Cache dei moduli OpenTofu
cache:
  key: ${CI_COMMIT_REF_SLUG}-pihole-opentofu
  paths:
    - ${TOFU_DIR}/.terraform

.rules_opentofu:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - opentofu/**/*
        - "!opentofu/archived/**/*"

# Configurazione di base per i job OpenTofu
.tofu_base:
  image: alpine:3.21
  extends:
    - .rules_opentofu
  before_script: |
    # Installazione OpenTofu e dipendenze
    apk add --no-cache curl unzip jq git bash ca-certificates
    curl -SL "https://github.com/opentofu/opentofu/releases/download/v${TOFU_VERSION}/tofu_${TOFU_VERSION}_linux_amd64.zip" -o /tmp/tofu.zip
    unzip /tmp/tofu.zip -d /usr/local/bin/
    rm /tmp/tofu.zip

    # Cambia nella directory OpenTofu
    echo "Entrando nella directory OpenTofu: ${TOFU_DIR}"
    cd "${TOFU_DIR}"

    # Configurazione backend GitLab
    cat > backend.tf << EOF
    terraform {
      backend "http" {
        address = "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${TF_STATE_NAME}"
        lock_address = "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${TF_STATE_NAME}/lock"
        unlock_address = "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${TF_STATE_NAME}/lock"
        username = "gitlab-ci-token"
        password = "${CI_PROJECT_ACCESS_TOKEN}"
        lock_method = "POST"
        unlock_method = "DELETE"
        retry_wait_min = 5
      }
    }
    EOF

    # Configurazione variabili Vault per OpenTofu
    export TF_VAR_vault_addr=${VAULT_ADDR}
    export TF_VAR_vault_approle_role_id=${VAULT_ROLE_ID}
    export TF_VAR_vault_approle_secret_id=${VAULT_SECRET_ID}
    export TF_VAR_vault_retry=2

    echo "Inizializzazione OpenTofu..."
    tofu init -reconfigure

# Validazione configurazione
tofu-validate:
  extends: .tofu_base
  stage: validate
  script: |
    echo "=== Validazione configurazione Pi-hole ==="
    tofu validate
    echo "✅ Configurazione valida!"

# Piano modifiche
tofu-plan:
  extends: .tofu_base
  stage: plan
  script: |
    echo "=== Creazione piano per Pi-hole DNS ==="
    
    # Verifica connessione a Vault
    echo "Verifica connessione a Vault..."
    if [ -n "$TF_VAR_vault_addr" ]; then
      echo "Vault address: $TF_VAR_vault_addr"
      echo "Vault role ID: ${TF_VAR_vault_approle_role_id:0:10}... (abbreviato)"
    else
      echo "ERRORE: Variabili Vault non configurate!"
      exit 1
    fi
    
    # Creazione del piano
    echo "Generazione piano..."
    tofu plan -out=plan.tfplan

    # Visualizzazione del piano
    echo "=== PIANO DELLE MODIFICHE ==="
    tofu show plan.tfplan > plan_human.txt
    tofu show -json plan.tfplan > plan.json

    # Riassunto delle modifiche
    echo "=== RIASSUNTO MODIFICHE ==="
    if [ -s plan.json ]; then
      CHANGES=$(jq -r '.resource_changes[]? | "\(.address): \(.change.actions | join(","))"' plan.json 2>/dev/null || echo "Nessuna modifica")
      echo "$CHANGES"
      
      # Conta le risorse
      RESOURCES_COUNT=$(jq '.resource_changes | length' plan.json 2>/dev/null || echo "0")
      echo "Totale risorse da modificare: $RESOURCES_COUNT"
    else
      echo "Nessuna modifica rilevata"
    fi

    # Mostra il piano completo
    echo "=== PIANO DETTAGLIATO ==="
    cat plan_human.txt
  artifacts:
    paths:
      - ${TOFU_DIR}/plan.tfplan
      - ${TOFU_DIR}/plan.json
      - ${TOFU_DIR}/plan_human.txt
    expire_in: 1 week
    reports:
      terraform: ${TOFU_DIR}/plan.json
  dependencies:
    - tofu-validate

# Applicazione modifiche
tofu-apply:
  extends: .tofu_base
  stage: apply
  script: |
    echo "=== Applicazione modifiche Pi-hole DNS ==="
    
    # Verifica che il piano esista
    if [ ! -f plan.tfplan ]; then
      echo "ERRORE: File del piano non trovato!"
      exit 1
    fi

    # Verifica se ci sono modifiche da applicare
    if [ -s plan.json ]; then
      RESOURCES_COUNT=$(jq '.resource_changes | length' plan.json 2>/dev/null || echo "0")
      if [ "$RESOURCES_COUNT" = "0" ]; then
        echo "ℹ️  Nessuna modifica da applicare"
        tofu show plan.tfplan
        exit 0
      else
        echo "📝 Applicando $RESOURCES_COUNT modifiche..."
      fi
    fi

    # Applicazione del piano
    echo "Esecuzione apply..."
    tofu apply -auto-approve plan.tfplan

    # Salva gli output
    echo "=== OUTPUT FINALE ==="
    tofu output -json > terraform_output.json || echo "{}" > terraform_output.json
    
    if [ -s terraform_output.json ]; then
      echo "Output salvati:"
      cat terraform_output.json | jq . || cat terraform_output.json
    else
      echo "Nessun output definito"
    fi

    echo "✅ Applicazione completata!"
  artifacts:
    paths:
      - ${TOFU_DIR}/terraform_output.json
    reports:
      terraform: ${TOFU_DIR}/terraform_output.json
  dependencies:
    - tofu-plan
  when: manual  # Richiede conferma manuale per l'apply
