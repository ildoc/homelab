{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Homelab","text":"<p>Questo progetto mira a utilizzare Infrastructure as Code e GitOps per automatizzare il pi\u00f9 possibile l'installazione e la configurazione del software che gira sul mio Homelab.</p> <p>Nel 2020 sono partito da un docker-compose e oggi sono messo cos\u00ec... \u00e8 un work in progress continuo \ud83d\ude05</p> <p>Che cos'\u00e8 un homelab?</p> <p>Un Homelab \u00e8 un laboratorio casalingo dove si pu\u00f2 fare self-hosting, sperimentare nuove tecnologie, fare pratica per certificazioni e cos\u00ec via.</p> <p>Per maggiori informazioni fare riferimento alla introduzione di r/homelab e alla community Discord Home Operations (ex k8s-at-home).</p> <p>Un ottimo articolo \u00e8 anche What is a Homelab and Why Should You Have One? </p>"},{"location":"#overview-generale","title":"Overview generale","text":"<p>Tutto l'Homelab gestito (principalmente) con playbook Ansible, ArgoCD e pipeline Gitlab.</p> <p>NOTA: questo repository GitHub \u00e8 un mirror del repository originale che si trova sulla mia istanza privata di GitLab</p>"},{"location":"#tech-stack","title":"Tech stack","text":"Logo Nome Descrzione Ansible Automazione di deploy e configurazioni ArgoCD Tool GitOps per deployare su Kubernetes Backblaze B2 Backup cloud di Truenas su bucket s3 cert-manager Cloud native certificate management Cilium CNI e controller per Gateway API Cloudflare Issuer dei certificati e Tunnel Docker Orchestrazione di container con docker compose GitLab Self-hosted Git e runner di pipeline CI/CD HashiCorp Vault Secrets management Helm Package manager per Kubernetes kube-vip Virtual IP e load balancer Kubernetes Container-orchestration system NGINX Reverse Proxy per GitLab OpenTofu Infrastructure as Code (work in progress) Pi-hole Ad blocker, DNS e DHCP Proxmox Virtualizzazione di VM e LXC Renovate Update automatico delle dipendenze TrueNAS NFS share, Backup Ubuntu Server Os di base per i nodi Kubernetes Wireguard VPN tunnel"},{"location":"hardware/","title":"Hardware","text":""},{"location":"hardware/#cluster-proxmox","title":"Cluster Proxmox","text":"<p>3x Beelink EQR5</p> <ul> <li>AMD Ryzen 7 5825U</li> <li>500 GB SSD M.2 </li> <li>64GB Ram (2 x 32GB)</li> <li>1 TB SSD</li> </ul>"},{"location":"hardware/#truenas","title":"Truenas","text":"<ul> <li>AMD Ryzen 7 5825U</li> <li>64GB Ram (2 x 32GB)</li> <li>2x SSD 250GB in mirroring per il sistema operativo</li> <li>5x HDD 6TB in Raidz2 per i dati</li> <li>1x HDD 8TB per i media</li> <li>1x SSD Nvme 500GB per le applicazioni</li> </ul>"},{"location":"hardware/#varie-ed-eventuali","title":"Varie ed eventuali","text":"<ul> <li>Raspberry Pi Zero 2 con PiHole come DNS e DHCP di backup</li> <li>Nvidia Shield per riprodurre i media da Jellyfinn</li> <li>UPS Eaton 5E</li> </ul>"},{"location":"test/","title":"Test","text":"<p>Welcome to Material for MkDocs.</p>"},{"location":"test/#annotations","title":"Annotations","text":"<p>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.</p> <ol> <li> I'm an annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be expressed in Markdown.</li> </ol>"},{"location":"test/#in-admonitions","title":"in admonitions","text":"<p>Phasellus posuere in sem ut cursus (1)</p> <p>Lorem ipsum dolor sit amet, (2) consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <ol> <li> I'm an annotation!</li> <li> I'm an annotation as well!</li> </ol>"},{"location":"test/#blocco-espanso","title":"Blocco espanso","text":"Warning <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"test/#inline","title":"Inline","text":"<p>Lorem ipsum</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>lallallero lallallero lallallero lallallero lallallero lallallero lallallero lallallero lallallero lallallero lallallero lallallero lallallero </p> bubble_sort.py<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre> <pre><code>theme:\n  features:\n    - content.code.annotate # (1)\n</code></pre> <ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown.</li> </ol> .gitignore<pre><code># terraform\n**/.terraform\n**/.terraform.lock.hcl\n</code></pre> CC++ <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  printf(\"Hello world!\\n\");\n  return 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nint main(void) {\n  std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre> <p>Example</p> Unordered ListOrdered List <pre><code>* Sed sagittis eleifend rutrum\n* Donec vitae suscipit est\n* Nulla tempor lobortis orci\n</code></pre> <pre><code>1. Sed sagittis eleifend rutrum\n2. Donec vitae suscipit est\n3. Nulla tempor lobortis orci\n</code></pre> Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource <pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre> Unordered listOrdered list <ul> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ul> <ol> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ol> Content tabs<pre><code>=== \"Unordered list\"\n\n    * Sed sagittis eleifend rutrum\n    * Donec vitae suscipit est\n    * Nulla tempor lobortis orci\n\n=== \"Ordered list\"\n\n    1. Sed sagittis eleifend rutrum\n    2. Donec vitae suscipit est\n    3. Nulla tempor lobortis orci\n</code></pre> <ul> <li> <p> Set up in 5 minutes</p> <p>Install <code>mkdocs-material</code> with <code>pip</code> and get up and running in minutes</p> <p> Getting started</p> </li> <li> <p> It's just Markdown</p> <p>Focus on your content and generate a responsive and searchable static site</p> <p> Reference</p> </li> <li> <p> Made to measure</p> <p>Change the colors, fonts, language, icons, logo and more with a few lines</p> <p> Customization</p> </li> <li> <p> Open Source, MIT</p> <p>Material for MkDocs is licensed under MIT and available on [GitHub]</p> <p> License</p> </li> </ul> <p> HTML for content and structure</p> <p> JavaScript for interactivity</p> <p> CSS for text running out of boxes</p> <p> Internet Explorer ... huh?</p> <p></p> <ul> <li> Lorem ipsum dolor sit amet, consectetur adipiscing elit</li> <li> Vestibulum convallis sit amet nisi a tincidunt<ul> <li> In hac habitasse platea dictumst</li> <li> In scelerisque nibh non dolor mollis congue sed et metus</li> <li> Praesent sed risus massa</li> </ul> </li> <li> <p> Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque</p> </li> <li> <p>Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis     sagittis. Aliquam purus tellus, faucibus eget urna at, iaculis venenatis     nulla. Vivamus a pharetra leo.</p> <ol> <li> <p>Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet     quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a     ultricies libero efficitur sed.</p> </li> <li> <p>Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet     rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a.</p> <ol> <li>Mauris dictum mi lacus</li> <li>Ut sit amet placerat ante</li> <li>Suspendisse ac eros arcu</li> </ol> </li> </ol> </li> </ul>"},{"location":"ansible/vault/","title":"HashiCorp Vault","text":""},{"location":"blog/","title":"I miei post","text":""},{"location":"blog/2025/04/30/finalmente-open/","title":"Finalmente open!","text":"<p>Circa a maggio 2020 in mezzo ai lockdown del COVID ho iniziato a tirarmi su un mediaserver con un semplice docker-compose e oggi, dopo quasi 5 anni di smarmellamenti, ho deciso di provare a rendere pubblico il repository del mio homelab.</p> <p>Sostanzialmente \u00e8 diviso in due grosse parti:</p> <ul> <li>Ansible: per installare e configurare i servizi che stanno su delle VM o dei LXC sul cluster di Proxmox (Vault, Gitlab, PiHole)</li> <li>Kubernetes: con entrypoint root-applications.yaml gestito tutto in modalit\u00e0 Gitops tramite ArgoCD, sia la parte di infrastruttura (cert-manager, traefik, rancher), sia quella di applicazioni.</li> </ul> <p>Visto che avevo key e password versionate dappertutto, nelle ultime settimane ho provato a spostare tutto su Hashicorp Vault usando una immagine docker custom con vault-agent per poter lanciare i playbook Ansible che uso per deployare e configurare tutto.</p> <p>Su Kubernetes invece ho integrato External Secret Operator sempre per poter recuperare i secret dal Vault e mi sono \"divertito\" a trovare un modo per deployarlo e configurarlo in modalit\u00e0 GitOps con ArgoCD.</p> <p></p> <p>E' rimasto ancora qualcosa fuori, per cui per ora ho un job nel gitlab-ci di questo repository che d\u00e0 una ripulita prima di committare e pushare il tutto su un nuovo repo \"pulito\" che poi fa mirroring su Github.</p> <p>Come ultima novit\u00e0 ho introdotto MkDocs per cominciare a fare un po' di documentazione e gestire gli aggiornamenti di questo mini blog che verr\u00e0 pubblicato sulle Github Pages da una Github Action sul repository mirrorato.</p> <p>Di cose da fare ce ne sono un sacco...</p> <ul> <li>Voglio implementare Harbor per fare il caching delle immagini Docker di DockerHub in modo da non sforare i nuovi limiti di pull orari</li> <li>Vorrei approfondire Terraform/Opentofu per fare il provisioning delle vm su Proxmox in modo da poter collegare il tutto ai due playbook con cui faccio il setup del cluster Kubernetes e la sua configurazione iniziale</li> <li>Devo implementare il monitoring e le notifiche su tutti i servizi</li> <li>Vorrei un SSO centralizzato per tutto, tipo Autentik</li> <li>Mi piacerebbe scorporare dei roles Ansible per poterli distribuire in repository a s\u00e9 stanti</li> <li>Vorrei documentare bene il tutto e magari provare a scrivere degli altri post su questo blog relativamente a problemi con cui mi scontro o cose che provo</li> <li>Vorrei man mano pulire bene il repository, sistemare le sync wave e gli hook di argocd, rivedere i roles di ansible, fare il linting di tutti gli yaml</li> </ul> <p>Intanto rendere open questo repo \u00e8 stata una bella sfida, adesso avanti con i prossimi step!</p>","tags":["kubernetes","gitops"]},{"location":"kubernetes/argocd/migration/","title":"Guida ArgoCD: Migrazione e Bootstrap","text":""},{"location":"kubernetes/argocd/migration/#parte-1-migrazione-da-installyaml-a-self-management-gitops","title":"Parte 1: Migrazione da install.yaml a Self-Management GitOps","text":""},{"location":"kubernetes/argocd/migration/#prerequisiti","title":"Prerequisiti","text":"<ul> <li>Cluster Kubernetes funzionante con ArgoCD installato via <code>kubectl apply -f install.yaml</code></li> <li>Repository GitOps gi\u00e0 configurato</li> <li>External Secrets Operator funzionante</li> </ul>"},{"location":"kubernetes/argocd/migration/#step-1-preparazione-del-chart-wrapper","title":"Step 1: Preparazione del Chart Wrapper","text":"<p>Creare la struttura del chart wrapper per ArgoCD:</p> <pre><code># Struttura directory\nkubernetes/infra/manifests/argocd/\n\u251c\u2500\u2500 Chart.yaml\n\u251c\u2500\u2500 values.yaml\n\u2514\u2500\u2500 templates/\n    \u2514\u2500\u2500 httproute.yaml\n</code></pre> <p>Chart.yaml: <pre><code>apiVersion: v2\nname: argocd\nversion: 1.0.0\ndependencies:\n  - name: argo-cd\n    version: 8.5.8\n    repository: https://argoproj.github.io/argo-helm\n</code></pre></p> <p>values.yaml: <pre><code>gateway:\n  enabled: true\n  name: cilium-gateway\n  namespace: kube-system\n  hostname: argocd.local.ildoc.it\n\nargo-cd:\n  global:\n    domain: argocd.local.ildoc.it\n\n  redis-ha:\n    enabled: true\n    haproxy:\n      enabled: true\n\n  controller:\n    replicas: 1\n\n  server:\n    replicas: 2\n    ingress:\n      enabled: false\n\n  repoServer:\n    replicas: 2\n\n  applicationSet:\n    replicas: 2\n\n  configs:\n    cm:\n      timeout.reconciliation: 180s\n    params:\n      server.insecure: \"true\"\n</code></pre></p> <p>templates/httproute.yaml: <pre><code>{{- if .Values.gateway.enabled }}\napiVersion: gateway.networking.k8s.io/v1\nkind: HTTPRoute\nmetadata:\n  name: argocd-server\n  labels:\n    app.kubernetes.io/name: argocd\n    app.kubernetes.io/instance: {{ .Release.Name }}\nspec:\n  parentRefs:\n  - name: {{ .Values.gateway.name }}\n    namespace: {{ .Values.gateway.namespace }}\n    sectionName: https\n  hostnames:\n  - {{ .Values.gateway.hostname | quote }}\n  rules:\n  - matches:\n    - path:\n        type: PathPrefix\n        value: /\n    backendRefs:\n    - name: argocd-server\n      port: 443\n{{- end }}\n</code></pre></p>"},{"location":"kubernetes/argocd/migration/#step-2-generazione-chartlock","title":"Step 2: Generazione Chart.lock","text":"<pre><code>cd kubernetes/infra/manifests/argocd\nhelm dependency update\ncd -\n\n# Committa Chart.lock (opzionale ma consigliato)\ngit add kubernetes/infra/manifests/argocd/Chart.lock\ngit commit -m \"Add ArgoCD Chart.lock\"\n</code></pre>"},{"location":"kubernetes/argocd/migration/#step-3-creazione-application-per-self-management","title":"Step 3: Creazione Application per Self-Management","text":"<p>kubernetes/infra/argocd.yaml: <pre><code>apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: argocd\n  namespace: argocd\n  annotations:\n    argocd.argoproj.io/sync-wave: \"-100\"\n  finalizers:\n    - resources-finalizer.argocd.argoproj.io\nspec:\n  project: default\n  source:\n    repoURL: https://gitlab.local.ildoc.it/ildoc/homelab.git\n    targetRevision: HEAD\n    path: kubernetes/infra/manifests/argocd\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: argocd\n  syncPolicy:\n    syncOptions:\n      - CreateNamespace=true\n    automated:\n      prune: false  # Importante: non cancellare automaticamente\n      selfHeal: true\n  ignoreDifferences:\n    - group: argoproj.io\n      kind: Application\n      jsonPointers:\n        - /status\n        - /operation\n</code></pre></p>"},{"location":"kubernetes/argocd/migration/#step-4-migrazione-effettiva","title":"Step 4: Migrazione Effettiva","text":"<pre><code># 1. Rimuovi finalizers dalle Applications per evitare blocchi\nkubectl get applications -n argocd -o name | while read app; do\n  kubectl patch $app -n argocd -p '{\"metadata\":{\"finalizers\":[]}}' --type=merge\ndone\n\n# 2. Rimuovi vecchia installazione\nkubectl delete -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/ha/install.yaml\n\n# 3. Attendi che il namespace sia pulito\nkubectl get namespace argocd -w  # Aspetta che termini la cancellazione\n\n# 4. Installa con Helm (saltando le CRD gi\u00e0 esistenti)\nhelm install argocd ./kubernetes/infra/manifests/argocd \\\n  -n argocd \\\n  --create-namespace \\\n  --skip-crds\n\n# 5. Verifica installazione\nkubectl get pods -n argocd -w\n\n# 6. Applica l'Application per self-management\nkubectl apply -f kubernetes/infra/argocd.yaml\n\n# 7. Verifica che ArgoCD gestisca se stesso\nkubectl get application argocd -n argocd\n</code></pre>"},{"location":"kubernetes/argocd/migration/#step-5-verifica-e-test","title":"Step 5: Verifica e Test","text":"<pre><code># Verifica che l'Application sia sincronizzata\nargocd app get argocd\n\n# Test di modifica: cambia un valore nel values.yaml\nvim kubernetes/infra/manifests/argocd/values.yaml\n# Cambia ad esempio: timeout.reconciliation: 180s \u2192 300s\n\ngit add kubernetes/infra/manifests/argocd/values.yaml\ngit commit -m \"Test self-management: update timeout\"\ngit push\n\n# Verifica che ArgoCD applichi automaticamente il cambiamento\nkubectl get configmap argocd-cm -n argocd -o yaml | grep reconciliation\n</code></pre>"},{"location":"kubernetes/argocd/migration/#parte-2-prima-installazione-di-un-nuovo-cluster","title":"Parte 2: Prima Installazione di un Nuovo Cluster","text":""},{"location":"kubernetes/argocd/migration/#step-1-installazione-iniziale-di-argocd","title":"Step 1: Installazione Iniziale di ArgoCD","text":"<pre><code># 1. Clona il repository GitOps\ngit clone https://gitlab.local.ildoc.it/ildoc/homelab.git\ncd homelab\n\n# 2. Installa ArgoCD con Helm\ncd kubernetes/infra/manifests/argocd\n\n# Genera Chart.lock (se non committato)\nhelm dependency update\n\n# Installa ArgoCD\nhelm install argocd . \\\n  -n argocd \\\n  --create-namespace \\\n  --skip-crds  # Le CRD sono gi\u00e0 nel manifest HA\n\ncd -\n\n# 3. Attendi che tutti i pod siano pronti\nkubectl wait --for=condition=Ready pods --all -n argocd --timeout=300s\n</code></pre>"},{"location":"kubernetes/argocd/migration/#step-2-configurazione-accesso-opzionale","title":"Step 2: Configurazione Accesso (Opzionale)","text":"<pre><code># Ottieni la password admin di default\nkubectl -n argocd get secret argocd-initial-admin-secret \\\n  -o jsonpath=\"{.data.password}\" | base64 -d\n\n# Login tramite CLI (opzionale)\nargocd login argocd.local.ildoc.it --username admin\n</code></pre>"},{"location":"kubernetes/argocd/migration/#step-3-configurazione-repository-ssh-se-privato","title":"Step 3: Configurazione Repository SSH (se privato)","text":"<pre><code># 1. Genera SSH key per ArgoCD\nssh-keygen -t ed25519 \\\n  -C \"argocd@local.ildoc.it\" \\\n  -f ~/.ssh/argocd_gitlab \\\n  -N \"\"\n\n# 2. Aggiungi la chiave pubblica a GitLab\ncat ~/.ssh/argocd_gitlab.pub\n# Copia e incolla in GitLab \u2192 Settings \u2192 Repository \u2192 Deploy Keys\n\n# 3. Salva la chiave privata in Vault\nvault kv put kubernetes/argocd \\\n  gitlab-ssh-key=@~/.ssh/argocd_gitlab\n\n# 4. Ottieni l'host key di GitLab\nssh-keyscan gitlab.local.ildoc.it\n\n# 5. Aggiungi le known hosts al values.yaml\nvim kubernetes/infra/manifests/argocd/values.yaml\n</code></pre> <p>Aggiungere: <pre><code>argo-cd:\n  configs:\n    ssh:\n      knownHosts: |\n        gitlab.local.ildoc.it ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAA...\n</code></pre></p> <pre><code># 6. Upgrade ArgoCD con la nuova configurazione\nhelm upgrade argocd kubernetes/infra/manifests/argocd \\\n  -n argocd\n</code></pre>"},{"location":"kubernetes/argocd/migration/#step-4-creazione-externalsecret-per-repository","title":"Step 4: Creazione ExternalSecret per Repository","text":"<p>kubernetes/infra/manifests/infra-secrets/argocd-repo-ssh.yaml: <pre><code>apiVersion: external-secrets.io/v1beta1\nkind: ExternalSecret\nmetadata:\n  name: argocd-repo-ssh\n  namespace: argocd\nspec:\n  refreshInterval: 1h\n  secretStoreRef:\n    name: vault-kubernetes-secret-store\n    kind: ClusterSecretStore\n  target:\n    name: repo-homelab-ssh\n    creationPolicy: Owner\n    template:\n      metadata:\n        labels:\n          argocd.argoproj.io/secret-type: repository\n      data:\n        type: git\n        url: git@gitlab.local.ildoc.it:ildoc/homelab.git\n        sshPrivateKey: \"{{ .sshKey }}\"\n  data:\n    - secretKey: sshKey\n      remoteRef:\n        key: kubernetes/data/argocd\n        property: gitlab-ssh-key\n</code></pre></p>"},{"location":"kubernetes/argocd/migration/#step-5-bootstrap-del-sistema-gitops","title":"Step 5: Bootstrap del Sistema GitOps","text":"<pre><code># 1. Applica l'Application root (app-of-apps)\nkubectl apply -f kubernetes/root-applications.yaml\n\n# 2. Verifica che la root Application sia stata creata\nkubectl get application root -n argocd\n\n# 3. La root Application creer\u00e0 automaticamente tutte le altre\nkubectl get applications -n argocd -w\n\n# Output atteso:\n# NAME              SYNC STATUS   HEALTH STATUS\n# root              Synced        Healthy\n# infra             Synced        Healthy\n# argocd            OutOfSync     Healthy  &lt;- Normale, ancora manuale\n# cert-manager      Synced        Healthy\n# cilium            Synced        Healthy\n# ...\n</code></pre>"},{"location":"kubernetes/argocd/migration/#step-6-adozione-self-management-di-argocd","title":"Step 6: Adozione Self-Management di ArgoCD","text":"<pre><code># 1. Applica l'Application per ArgoCD stesso\nkubectl apply -f kubernetes/infra/argocd.yaml\n\n# 2. Verifica lo stato\nkubectl get application argocd -n argocd\n\n# 3. Forza il primo sync (pu\u00f2 essere OutOfSync)\nargocd app sync argocd\n\n# 4. Da ora in poi, ArgoCD gestisce se stesso!\n# Ogni modifica a values.yaml viene applicata automaticamente\n</code></pre>"},{"location":"kubernetes/argocd/migration/#step-7-verifica-finale","title":"Step 7: Verifica Finale","text":"<pre><code># 1. Controlla tutte le Applications\nkubectl get applications -n argocd\n\n# 2. Verifica la salute di ArgoCD\nkubectl get pods -n argocd\n\n# 3. Test self-management\n# Modifica qualcosa nel values.yaml di ArgoCD\nvim kubernetes/infra/manifests/argocd/values.yaml\ngit add . &amp;&amp; git commit -m \"Test\" &amp;&amp; git push\n\n# 4. Osserva ArgoCD applicare la modifica automaticamente\nkubectl get application argocd -n argocd -w\n</code></pre>"},{"location":"kubernetes/argocd/migration/#ordine-di-deploy-consigliato","title":"Ordine di Deploy Consigliato","text":"<p>Grazie alle sync-waves, l'ordine \u00e8 automatico: 1. Wave -100: Cilium, External Secrets CRDs 2. Wave -99: NFS CSI, Metrics Server 3. Wave -98: Cert-Manager, External Secrets Operator 4. Wave -90: Certificates 5. Wave -85: Prometheus Stack 6. Wave -80: Infra Secrets 7. Wave -79: Ingresses 8. Wave -75: GitLab Runner 9. Wave -70: Rancher 10. Wave -60: Authentik 11. Altre applicazioni</p>"},{"location":"kubernetes/argocd/migration/#note-importanti","title":"Note Importanti","text":""},{"location":"kubernetes/argocd/migration/#gestione-degli-aggiornamenti","title":"Gestione degli Aggiornamenti","text":"<p>Per aggiornare ArgoCD: <pre><code># 1. Modifica Chart.yaml\nvim kubernetes/infra/manifests/argocd/Chart.yaml\n# version: 8.5.8 \u2192 8.6.0\n\n# 2. Aggiorna dipendenze\ncd kubernetes/infra/manifests/argocd\nhelm dependency update\n\n# 3. Committa\ngit add Chart.yaml Chart.lock\ngit commit -m \"Update ArgoCD to 8.6.0\"\ngit push\n\n# 4. ArgoCD si aggiorna automaticamente!\n</code></pre></p>"},{"location":"kubernetes/argocd/migration/#troubleshooting-comune","title":"Troubleshooting Comune","text":"<p>Application OutOfSync permanente: <pre><code># Verifica ignoreDifferences\nkubectl describe application argocd -n argocd\n\n# Forza sync\nargocd app sync argocd --force\n</code></pre></p> <p>Repository connection failed: <pre><code># Verifica il secret\nkubectl get secret -n argocd -l argocd.argoproj.io/secret-type=repository\n\n# Test connessione\nkubectl exec -n argocd deployment/argocd-repo-server -- \\\n  ssh -T git@gitlab.local.ildoc.it\n</code></pre></p> <p>Namespace bloccato in Terminating: <pre><code># Rimuovi finalizers\nkubectl get applications -n argocd -o name | while read app; do\n  kubectl patch $app -n argocd -p '{\"metadata\":{\"finalizers\":null}}' --type=merge\ndone\n</code></pre></p>"},{"location":"kubernetes/argocd/migration/#backup-e-disaster-recovery","title":"Backup e Disaster Recovery","text":"<p>In caso di disaster, il ripristino \u00e8 semplice: <pre><code># 1. Reinstalla ArgoCD con Helm\nhelm install argocd ./kubernetes/infra/manifests/argocd -n argocd\n\n# 2. Applica root-applications.yaml\nkubectl apply -f kubernetes/root-applications.yaml\n\n# 3. Tutto si ricrea automaticamente da Git!\n</code></pre></p>"},{"location":"kubernetes/authentik/authentik_matrix_oidc/","title":"Configurazione Authentik come OIDC Provider per Matrix","text":""},{"location":"kubernetes/authentik/authentik_matrix_oidc/#fase-1-configurazione-authentik-web-ui","title":"Fase 1: Configurazione Authentik (Web UI)","text":""},{"location":"kubernetes/authentik/authentik_matrix_oidc/#11-crea-un-oauth2oidc-provider","title":"1.1 Crea un OAuth2/OIDC Provider","text":"<ol> <li>Accedi ad Authentik: <code>https://auth.ildoc.it</code></li> <li>Vai su Applications \u2192 Providers</li> <li>Click su Create</li> <li>Seleziona OAuth2/OpenID Provider</li> </ol> <p>Configurazione del Provider: - Name: <code>Matrix Synapse</code> - Authorization flow: <code>default-provider-authorization-implicit-consent</code> (o quello che preferisci) - Client type: <code>Confidential</code> - Client ID: <code>matrix-synapse</code> (puoi personalizzarlo) - Client Secret: Copia questo valore! Lo useremo dopo in Vault - Redirect URIs/Origins (RegEx):   <pre><code>https://matrix\\.ildoc\\.it/_synapse/client/oidc/callback\n</code></pre> - Signing Key: <code>authentik Self-signed Certificate</code> (o il tuo certificato)</p> <p>Configurazioni avanzate (clicca \"Advanced protocol settings\"): - Scopes:    - <code>openid</code> \u2713   - <code>email</code> \u2713   - <code>profile</code> \u2713 - Subject mode: <code>Based on the User's UUID</code> - Include claims in id_token: \u2713 (abilitato)</p>"},{"location":"kubernetes/authentik/authentik_matrix_oidc/#12-crea-lapplication","title":"1.2 Crea l'Application","text":"<ol> <li>Vai su Applications \u2192 Applications</li> <li>Click su Create</li> </ol> <p>Configurazione: - Name: <code>Matrix</code> - Slug: <code>matrix</code> - Provider: Seleziona il provider <code>Matrix Synapse</code> creato prima - Launch URL: <code>https://element.ildoc.it</code> (opzionale) - Policy engine mode: <code>any</code> (o configura policy specifiche)</p>"},{"location":"kubernetes/authentik/authentik_matrix_oidc/#13-opzionale-crea-un-gruppo-per-utenti-matrix","title":"1.3 (Opzionale) Crea un gruppo per utenti Matrix","text":"<ol> <li>Vai su Directory \u2192 Groups</li> <li>Crea un gruppo chiamato <code>matrix-users</code></li> <li>Assegna gli utenti che devono accedere a Matrix</li> </ol> <p>Poi nella Application, configura le policy per permettere solo a questo gruppo l'accesso.</p>"},{"location":"kubernetes/authentik/authentik_matrix_oidc/#fase-2-salva-il-client-secret-in-vault","title":"Fase 2: Salva il Client Secret in Vault","text":"<pre><code># Salva il client secret che hai copiato da Authentik\nvault kv put kubernetes/data/apps/matrix \\\n  oidc_client_secret=\"&lt;IL_CLIENT_SECRET_DA_AUTHENTIK&gt;\"\n\n# Verifica\nvault kv get kubernetes/data/apps/matrix\n</code></pre>"},{"location":"kubernetes/authentik/authentik_matrix_oidc/#fase-3-aggiorna-matrix-configmap","title":"Fase 3: Aggiorna Matrix ConfigMap","text":"<p>Aggiungi la configurazione OIDC a <code>homeserver.yaml</code> nella ConfigMap di Matrix.</p>"},{"location":"kubernetes/authentik/authentik_matrix_oidc/#fase-4-aggiorna-matrix-deployment","title":"Fase 4: Aggiorna Matrix Deployment","text":"<p>Aggiungi l'environment variable per il client secret.</p>"},{"location":"kubernetes/authentik/authentik_matrix_oidc/#fase-5-aggiorna-lexternal-secret","title":"Fase 5: Aggiorna l'External Secret","text":"<p>Aggiungi il client secret ai secret di Matrix.</p>"},{"location":"kubernetes/authentik/authentik_matrix_oidc/#fase-6-test-del-flusso-oidc","title":"Fase 6: Test del flusso OIDC","text":""},{"location":"kubernetes/authentik/authentik_matrix_oidc/#test-via-element-web","title":"Test via Element Web","text":"<ol> <li>Vai su <code>https://element.ildoc.it</code></li> <li>Clicca su \"Sign in\"</li> <li>Dovresti vedere un pulsante \"Continue with Authentik\" (o simile)</li> <li>Click \u2192 redirect ad Authentik</li> <li>Login con le tue credenziali Authentik</li> <li>Consent screen (se necessario)</li> <li>Redirect a Element, ora sei autenticato!</li> </ol>"},{"location":"kubernetes/authentik/authentik_matrix_oidc/#test-via-curl-per-debug","title":"Test via curl (per debug)","text":"<pre><code># 1. Discovery endpoint\ncurl https://auth.ildoc.it/application/o/matrix-synapse/.well-known/openid-configuration | jq\n\n# 2. Verifica che Matrix veda la configurazione OIDC\nkubectl exec -n apps deploy/matrix-synapse -- \\\n  grep -A 20 \"oidc_providers\" /data/homeserver.yaml\n\n# 3. Controlla i logs di Matrix durante il login\nkubectl logs -n apps -l app=matrix-synapse -f | grep -i oidc\n</code></pre>"},{"location":"kubernetes/authentik/authentik_matrix_oidc/#troubleshooting","title":"Troubleshooting","text":""},{"location":"kubernetes/authentik/authentik_matrix_oidc/#errore-redirect_uri-mismatch","title":"Errore \"redirect_uri mismatch\"","text":"<p>Verifica che l'URI in Authentik sia esattamente: <pre><code>https://matrix\\.ildoc\\.it/_synapse/client/oidc/callback\n</code></pre></p>"},{"location":"kubernetes/authentik/authentik_matrix_oidc/#utente-non-viene-creato-automaticamente","title":"Utente non viene creato automaticamente","text":"<p>Controlla i mapping in Authentik e assicurati che <code>allow_existing_users</code> sia true.</p>"},{"location":"kubernetes/authentik/authentik_matrix_oidc/#errore-issuer-mismatch","title":"Errore \"issuer mismatch\"","text":"<p>Verifica che <code>issuer</code> nella configurazione Matrix corrisponda esattamente all'URL di Authentik (con trailing slash).</p>"},{"location":"kubernetes/authentik/authentik_matrix_oidc/#voglio-vedere-gli-attributi-che-authentik-passa-a-matrix","title":"Voglio vedere gli attributi che Authentik passa a Matrix","text":"<pre><code># Abilita debug logging in Matrix\nkubectl exec -n apps deploy/matrix-synapse -- \\\n  sed -i 's/level: INFO/level: DEBUG/' /data/log.config\n\n# Restart del pod\nkubectl rollout restart -n apps deploy/matrix-synapse\n\n# Guarda i log\nkubectl logs -n apps -l app=matrix-synapse -f | grep -i \"oidc\\|userinfo\"\n</code></pre>"},{"location":"kubernetes/authentik/authentik_matrix_oidc/#attributi-mappati","title":"Attributi mappati","text":"<p>Con questa configurazione, Authentik passer\u00e0 a Matrix:</p> Attributo Authentik Claim OIDC Uso in Matrix <code>username</code> <code>preferred_username</code> Matrix User ID <code>email</code> <code>email</code> Email utente <code>name</code> <code>name</code> Display name <code>UUID</code> <code>sub</code> Subject ID (univoco)"},{"location":"kubernetes/authentik/authentik_matrix_oidc/#gestione-utenti","title":"Gestione utenti","text":""},{"location":"kubernetes/authentik/authentik_matrix_oidc/#utenti-esistenti","title":"Utenti esistenti","text":"<p>Se hai gi\u00e0 utenti in Matrix con password locale, e vuoi permettere loro di usare OIDC: - Imposta <code>allow_existing_users: true</code> - L'utente deve avere lo stesso <code>localpart</code> (parte prima di <code>:matrix.ildoc.it</code>)</p>"},{"location":"kubernetes/authentik/authentik_matrix_oidc/#solo-oidc-consigliato","title":"Solo OIDC (consigliato)","text":"<p>Per forzare OIDC e disabilitare completamente la registrazione locale:</p> <pre><code>enable_registration: false\npassword_config:\n  enabled: false  # Disabilita completamente le password\n</code></pre>"},{"location":"kubernetes/authentik/authentik_matrix_oidc/#mapping-username","title":"Mapping username","text":"<p>Matrix userID = <code>@&lt;preferred_username&gt;:matrix.ildoc.it</code></p> <p>Assicurati che gli username in Authentik siano: - Minuscoli - Senza spazi - Senza caratteri speciali (solo lettere, numeri, <code>_</code>, <code>-</code>, <code>.</code>)</p>"},{"location":"kubernetes/authentik/authentik_matrix_oidc/#flusso-di-autenticazione-completo","title":"Flusso di autenticazione completo","text":"<pre><code>1. Utente visita Element Web\n2. Click \"Sign in with Authentik\"\n3. \u2192 Redirect a https://auth.ildoc.it/application/o/authorize/\n4. Authentik: login + consent\n5. \u2192 Redirect a https://matrix.ildoc.it/_synapse/client/oidc/callback?code=...\n6. Matrix scambia code con access token\n7. Matrix chiama userinfo endpoint di Authentik\n8. Matrix crea/aggiorna utente locale\n9. Matrix genera access token per Element\n10. Element \u00e8 autenticato!\n</code></pre>"},{"location":"kubernetes/authentik/authentik_matrix_oidc/#best-practices","title":"Best Practices","text":"<ol> <li>Usa gruppi Authentik per controllare chi pu\u00f2 accedere a Matrix</li> <li>Abilita MFA in Authentik per maggiore sicurezza</li> <li>Monitora i log durante i primi test</li> <li>Backup della configurazione prima di modificare</li> <li>Testa con un utente di test prima di rollout completo</li> </ol>"},{"location":"kubernetes/authentik/authentik_matrix_oidc/#next-steps","title":"Next Steps","text":"<p>Una volta funzionante: - Configura policy di accesso in Authentik - Abilita MFA per utenti Matrix - Configura email notifications da Authentik - Considera federation con altri server Matrix (se necessario)</p>"},{"location":"kubernetes/monitoring/claude/","title":"Claude","text":"<p>Perfetto! Hai ragione su entrambi i fronti. Facciamo un setup pulito e dichiarativo.</p>"},{"location":"kubernetes/monitoring/claude/#manifest-necessari-per-il-tuo-setup","title":"\ud83d\udcc1 Manifest necessari per il tuo setup","text":""},{"location":"kubernetes/monitoring/claude/#struttura-file-da-creare","title":"Struttura file da creare:","text":"<pre><code>kubernetes/\n\u251c\u2500\u2500 infra/\n\u2502   \u251c\u2500\u2500 prometheus-stack.yaml                    # ArgoCD Application\n\u2502   \u2514\u2500\u2500 manifests/\n\u2502       \u2514\u2500\u2500 prometheus-stack/\n\u2502           \u251c\u2500\u2500 Chart.yaml                       # Helm chart definition\n\u2502           \u251c\u2500\u2500 values.yaml                       # Configurazione principale\n\u2502           \u2514\u2500\u2500 templates/\n\u2502               \u251c\u2500\u2500 httproutes.yaml               # Routes per Grafana/Prometheus/AlertManager\n\u2502               \u251c\u2500\u2500 pve-exporter.yaml             # Proxmox exporter deployment\n\u2502               \u2514\u2500\u2500 monitoring-targets.yaml       # ServiceMonitors e Probes\n</code></pre>"},{"location":"kubernetes/monitoring/claude/#i-manifest-essenziali-step-da-eseguire","title":"\ud83d\udcdd I Manifest essenziali:## \ud83d\ude80 Step da eseguire:","text":""},{"location":"kubernetes/monitoring/claude/#1-prepara-proxmox-5-minuti","title":"1. Prepara Proxmox (5 minuti)","text":"<pre><code># Sul tuo Proxmox, crea un utente read-only per il monitoring\npveum user add monitoring@pve --comment \"Prometheus monitoring\"\npveum passwd monitoring@pve  # Setta la password\npveum aclmod / -user monitoring@pve -role PVEAuditor\n</code></pre>"},{"location":"kubernetes/monitoring/claude/#2-configura-gitlab-5-minuti","title":"2. Configura GitLab (5 minuti)","text":"<pre><code># Verifica che i exporter siano abilitati in /etc/gitlab/gitlab.rb\ngitlab_exporter['enable'] = true\nprometheus['enable'] = true\nnode_exporter['enable'] = true\nredis_exporter['enable'] = true\npostgres_exporter['enable'] = true\ngitlab_monitor['enable'] = true\n\n# Riconfigura GitLab\nsudo gitlab-ctl reconfigure\n</code></pre>"},{"location":"kubernetes/monitoring/claude/#3-crea-i-file-nel-repo-10-minuti","title":"3. Crea i file nel repo (10 minuti)","text":"<pre><code># Crea la struttura\nmkdir -p kubernetes/infra/manifests/prometheus-stack/templates\n\n# Copia i manifest nelle posizioni corrette\n# - prometheus-stack.yaml in kubernetes/infra/\n# - Chart.yaml in kubernetes/infra/manifests/prometheus-stack/\n# - values.yaml in kubernetes/infra/manifests/prometheus-stack/\n# - *.yaml in kubernetes/infra/manifests/prometheus-stack/templates/\n</code></pre>"},{"location":"kubernetes/monitoring/claude/#4-personalizza-le-configurazioni","title":"4. Personalizza le configurazioni","text":"<p>Modifica nei file: - Password Grafana in <code>values.yaml</code> - Credenziali Proxmox in <code>pve-exporter.yaml</code> - Token Telegram in <code>values.yaml</code> (se vuoi gli alert) - IP dei nodi Proxmox in <code>pve-exporter.yaml</code></p>"},{"location":"kubernetes/monitoring/claude/#5-commit-e-deploy","title":"5. Commit e deploy","text":"<pre><code>git add kubernetes/infra/prometheus-stack.yaml\ngit add kubernetes/infra/manifests/prometheus-stack/\ngit commit -m \"Add Prometheus monitoring stack with GitLab and Proxmox\"\ngit push\n</code></pre>"},{"location":"kubernetes/monitoring/claude/#6-argocd-fara-il-deploy-automatico","title":"6. ArgoCD far\u00e0 il deploy automatico","text":"<p>Dopo qualche minuto avrai: - \ud83d\udcca Grafana: https://grafana.local.ildoc.it - \ud83d\udcc8 Prometheus: https://prometheus.local.ildoc.it - \ud83d\udd14 AlertManager: https://alertmanager.local.ildoc.it</p>"},{"location":"kubernetes/monitoring/claude/#cosa-avrai","title":"\u2705 Cosa avrai:","text":"<ol> <li>Monitoring completo dichiarativo (tutto in Git)</li> <li>GitLab monitorato con tutte le metriche native</li> <li>Proxmox cluster con metriche di VM, container, storage</li> <li>HTTP Probes per tutti i servizi (sostituisce Uptime Kuma)</li> <li>Dashboard Grafana pre-configurate</li> <li>Alert configurabili via YAML</li> </ol>"},{"location":"kubernetes/monitoring/claude/#pro-di-questo-approccio","title":"\ud83c\udfaf Pro di questo approccio:","text":"<ul> <li>\u2705 100% GitOps - tutto versionato e dichiarativo</li> <li>\u2705 No agent da installare - GitLab e Proxmox hanno gi\u00e0 tutto</li> <li>\u2705 Probes dichiarativi - aggiungi/rimuovi target via Git</li> <li>\u2705 Storia metriche - 30 giorni di retention</li> <li>\u2705 Alert intelligenti - basati su metriche, non solo up/down</li> </ul> <p>Puoi tenere Uptime Kuma per la status page pubblica, ma ora hai il monitoring serio sotto! \ud83d\ude80</p>"},{"location":"blog/archive/2025/","title":"2025","text":""}]}