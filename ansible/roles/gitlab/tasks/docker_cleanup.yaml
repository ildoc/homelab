---
# ansible/roles/gitlab/tasks/docker_cleanup.yaml

- name: Create docker cleanup script directory
  ansible.builtin.file:
    path: ~/scripts
    state: directory
    mode: '0755'

- name: Copy docker cleanup script
  ansible.builtin.template:
    src: docker-cleanup.sh.j2
    dest: ~/scripts/docker-cleanup.sh
    mode: '0755'
    backup: true
  register: cleanup_script_result

- name: Create log directory for cleanup
  ansible.builtin.file:
    path: /var/log
    state: directory
    mode: '0755'

# Controlla se il config del runner esiste e se è diverso
- name: Check if runner config exists
  ansible.builtin.stat:
    path: ~/runner/config.toml
  register: runner_config_stat

- name: Read existing runner config if exists
  ansible.builtin.slurp:
    src: ~/runner/config.toml
  register: existing_runner_config
  when: runner_config_stat.stat.exists

- name: Generate runner config from template
  ansible.builtin.set_fact:
    runner_config_content: "{{ lookup('template', 'runner-config.toml.j2') }}"

- name: Check if runner config needs update
  ansible.builtin.set_fact:
    runner_config_needs_update: >-
      {{
        not runner_config_stat.stat.exists or
        (existing_runner_config.content | b64decode) != runner_config_content
      }}

- name: Configure runner with cleanup settings
  ansible.builtin.template:
    src: runner-config.toml.j2
    dest: ~/runner/config.toml
    mode: '0600'
    backup: true
  when: runner_config_needs_update
  notify: Restart runner

# Cron jobs - già idempotenti per natura
- name: Schedule docker cleanup via cron (every N hours)
  ansible.builtin.cron:
    name: "Docker cleanup for GitLab"
    minute: "0"
    hour: "*/{{ gitlab.cleanup.interval_hours | default(6) }}"
    job: "/root/scripts/docker-cleanup.sh > /dev/null 2>&1"
    state: present
  register: cleanup_cron

- name: Schedule aggressive cleanup (daily at specified hour)
  ansible.builtin.cron:
    name: "Docker aggressive cleanup"
    minute: "0"
    hour: "{{ gitlab.cleanup.aggressive_hour | default(2) }}"
    job: "docker system prune -af --volumes > /var/log/docker-prune.log 2>&1"
    state: present
  register: aggressive_cron

- name: Monitor disk usage and alert
  ansible.builtin.cron:
    name: "Check docker disk usage"
    minute: "*/30"
    job: |
      USAGE=$(df -h /var/lib/docker | awk 'NR==2 {print $5}' | sed 's/%//');
      if [ "$USAGE" -gt {{ gitlab.cleanup.disk_threshold | default(85) }} ]; then
        echo "WARNING: Docker disk usage is at ${USAGE}%" | logger -t docker-monitor;
        /root/scripts/docker-cleanup.sh;
      fi
    state: present
  register: monitor_cron

# Controlla se il daemon.json esiste e confronta il contenuto
- name: Check if Docker daemon.json exists
  ansible.builtin.stat:
    path: /etc/docker/daemon.json
  register: daemon_json_stat

- name: Read existing daemon.json if exists
  ansible.builtin.slurp:
    src: /etc/docker/daemon.json
  register: existing_daemon_json
  when: daemon_json_stat.stat.exists

- name: Generate daemon.json from template
  ansible.builtin.set_fact:
    daemon_json_content: "{{ lookup('template', 'daemon.json.j2') }}"

- name: Parse JSON contents for comparison
  ansible.builtin.set_fact:
    existing_daemon_parsed: "{{ (existing_daemon_json.content | b64decode | from_json) if daemon_json_stat.stat.exists else {} }}"
    new_daemon_parsed: "{{ daemon_json_content | from_json }}"

- name: Check if daemon.json needs update
  ansible.builtin.set_fact:
    daemon_json_needs_update: "{{ existing_daemon_parsed != new_daemon_parsed }}"

- name: Configure Docker daemon with size limits
  ansible.builtin.template:
    src: daemon.json.j2
    dest: /etc/docker/daemon.json
    mode: '0644'
    backup: true
  when: daemon_json_needs_update
  notify: Restart docker
  register: daemon_config_result

# Logrotate - confronta contenuto prima di aggiornare
- name: Define logrotate configuration
  ansible.builtin.set_fact:
    logrotate_content: |
      /var/log/docker-cleanup.log {
          daily
          rotate 7
          compress
          delaycompress
          missingok
          notifempty
          create 640 root root
      }

- name: Check existing logrotate config
  ansible.builtin.stat:
    path: /etc/logrotate.d/docker-cleanup
  register: logrotate_stat

- name: Read existing logrotate config if exists
  ansible.builtin.slurp:
    src: /etc/logrotate.d/docker-cleanup
  register: existing_logrotate
  when: logrotate_stat.stat.exists

- name: Check if logrotate needs update
  ansible.builtin.set_fact:
    logrotate_needs_update: >-
      {{
        not logrotate_stat.stat.exists or
        (existing_logrotate.content | b64decode) != logrotate_content
      }}

- name: Setup log rotation for docker logs
  ansible.builtin.copy:
    content: "{{ logrotate_content }}"
    dest: /etc/logrotate.d/docker-cleanup
    mode: '0644'
  when: logrotate_needs_update

# Report dei cambiamenti
- name: Report configuration changes
  ansible.builtin.debug:
    msg:
      - "Cleanup script updated: {{ cleanup_script_result.changed }}"
      - "Runner config updated: {{ runner_config_needs_update }}"
      - "Daemon.json updated: {{ daemon_json_needs_update }}"
      - "Cron jobs updated: {{ cleanup_cron.changed or aggressive_cron.changed or monitor_cron.changed }}"
      - "Logrotate updated: {{ logrotate_needs_update }}"
  tags: always
