---
# IMPORTANTE: Installare cron se non presente (Ubuntu 24.04 lite non lo ha di default)
- name: Install cron package
  ansible.builtin.apt:
    name: cron
    state: present
    update_cache: true

- name: Ensure cron service is running
  ansible.builtin.systemd:
    name: cron
    state: started
    enabled: true

- name: Create certbot folder
  ansible.builtin.file:
    path: ~/certbot
    state: directory
    mode: '0755'

- name: Check existing cloudflare.ini
  ansible.builtin.stat:
    path: ~/certbot/cloudflare.ini
  register: cloudflare_ini_stat

- name: Read existing cloudflare.ini if exists
  ansible.builtin.slurp:
    src: ~/certbot/cloudflare.ini
  register: existing_cloudflare_ini
  when: cloudflare_ini_stat.stat.exists

- name: Generate cloudflare.ini content
  ansible.builtin.set_fact:
    cloudflare_ini_content: "{{ lookup('template', 'cloudflare.ini.j2') }}"

- name: Check if cloudflare.ini needs update
  ansible.builtin.set_fact:
    cloudflare_ini_needs_update: >-
      {{
        not cloudflare_ini_stat.stat.exists or
        (existing_cloudflare_ini.content | b64decode) != cloudflare_ini_content
      }}

- name: Deploy cloudflare.ini
  ansible.builtin.template:
    src: cloudflare.ini.j2
    dest: ~/certbot/cloudflare.ini
    mode: '0600'
    backup: yes
  when: cloudflare_ini_needs_update

- name: Check if certificate already exists
  ansible.builtin.stat:
    path: "./certbot/conf/live/{{ gitlab.domain }}/fullchain.pem"
  register: cert_status

- name: Calculate certificate age in days
  ansible.builtin.set_fact:
    cert_age_days: >-
      {{
        ((ansible_date_time.epoch | int) - (cert_status.stat.mtime | int)) / 86400 
        if cert_status.stat.exists 
        else 999
      }}

- name: Determine if certificate needs renewal
  ansible.builtin.set_fact:
    cert_needs_renewal: >-
      {{
        not cert_status.stat.exists or
        (cert_age_days | int > 60)
      }}

- name: Debug certificate status
  ansible.builtin.debug:
    msg: 
      - "Certificate exists: {{ cert_status.stat.exists }}"
      - "Certificate age (days): {{ cert_age_days | int if cert_status.stat.exists else 'N/A' }}"
      - "Needs renewal: {{ cert_needs_renewal }}"

- name: Run certbot only if cert does not exist or needs renewal
  ansible.builtin.command: >-
    docker run --rm \
      -v ./certbot/conf:/etc/letsencrypt \
      -v ./certbot/www:/var/www/certbot \
      -v ./certbot/cloudflare.ini:/cloudflare.ini \
      certbot/dns-cloudflare:latest \
      certonly \
      --non-interactive \
      --agree-tos \
      --dns-cloudflare \
      --dns-cloudflare-credentials /cloudflare.ini \
      --dns-cloudflare-propagation-seconds 30 \
      --preferred-challenges dns-01 \
      -d {{ gitlab.domain }} \
      -d registry.{{ gitlab.domain }} \
      --email {{ gitlab.letsencrypt_email }} \
      --server https://acme-v02.api.letsencrypt.org/directory \
      --force-renewal
  when: cert_needs_renewal
  register: certbot_result

- name: Check existing renew script
  ansible.builtin.stat:
    path: ~/certbot/renew-cert.sh
  register: renew_script_stat

- name: Read existing renew script if exists
  ansible.builtin.slurp:
    src: ~/certbot/renew-cert.sh
  register: existing_renew_script
  when: renew_script_stat.stat.exists

- name: Generate renew script content
  ansible.builtin.set_fact:
    renew_script_content: "{{ lookup('template', 'renew-cert.sh.j2') }}"

- name: Check if renew script needs update
  ansible.builtin.set_fact:
    renew_script_needs_update: >-
      {{
        not renew_script_stat.stat.exists or
        (existing_renew_script.content | b64decode) != renew_script_content
      }}

- name: Copy renew script
  ansible.builtin.template:
    src: renew-cert.sh.j2
    dest: ~/certbot/renew-cert.sh
    mode: '0755'
    backup: yes
  when: renew_script_needs_update

- name: Schedule certificate renew script
  ansible.builtin.cron:
    name: "Renew cert {{ gitlab.domain }}"
    minute: "0"
    hour: "*/12"
    job: "/root/certbot/renew-cert.sh"
    state: present
    user: root
