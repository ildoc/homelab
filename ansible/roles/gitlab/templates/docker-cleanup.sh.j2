#!/bin/bash

# Script di pulizia Docker per GitLab
# Da eseguire periodicamente via cron o manualmente

set -e

LOG_FILE="/var/log/docker-cleanup.log"
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')

# Funzione per logging
log_message() {
    echo "[$TIMESTAMP] $1" | tee -a "$LOG_FILE"
}

# Funzione per calcolare lo spazio su disco
get_disk_usage() {
    df -h /var/lib/docker | awk 'NR==2 {print $5}' | sed 's/%//'
}

# Funzione per calcolare lo spazio usato da Docker
get_docker_usage() {
    docker system df --format "table {{.Type}}\t{{.Size}}\t{{.Reclaimable}}" | tail -n +2
}

log_message "========== Inizio pulizia Docker =========="
log_message "Uso disco prima della pulizia: $(get_disk_usage)%"
log_message "Spazio Docker prima:"
get_docker_usage >> "$LOG_FILE"

# 1. Ferma e rimuovi container non in esecuzione da più di 24 ore
log_message "Rimozione container fermi..."
CONTAINERS_REMOVED=$(docker container prune -f --filter "until=24h" 2>&1 | tee -a "$LOG_FILE")

# 2. Rimuovi immagini non taggate (dangling)
log_message "Rimozione immagini dangling..."
docker image prune -f 2>&1 | tee -a "$LOG_FILE"

# 3. Rimuovi immagini non utilizzate da più di 48 ore
# Esclude le immagini base comuni per non rimuoverle
log_message "Rimozione immagini non utilizzate..."
docker image prune -a -f --filter "until=48h" \
    --filter "label!=keep=true" \
    --filter "label!=gitlab-runner=true" 2>&1 | tee -a "$LOG_FILE"

# 4. Rimuovi volumi non utilizzati
log_message "Rimozione volumi non utilizzati..."
docker volume prune -f 2>&1 | tee -a "$LOG_FILE"

# 5. Rimuovi reti non utilizzate
log_message "Rimozione reti non utilizzate..."
docker network prune -f 2>&1 | tee -a "$LOG_FILE"

# 6. Pulizia build cache (se Docker BuildKit è usato)
log_message "Rimozione build cache..."
docker builder prune -f --filter "until=48h" 2>&1 | tee -a "$LOG_FILE" || true

# 7. Pulizia specifica per GitLab Runner
log_message "Pulizia cache GitLab Runner..."
# Rimuovi immagini con pattern specifici del runner
docker images | grep -E "runner-.*project-.*concurrent-" | awk '{print $3}' | xargs -r docker rmi -f 2>/dev/null || true

# 8. Pulizia layer intermedi
log_message "Pulizia layer intermedi..."
docker image prune -a -f --filter "dangling=true" 2>&1 | tee -a "$LOG_FILE"

# 9. Se lo spazio su disco è ancora sopra l'80%, pulizia più aggressiva
DISK_USAGE=$(get_disk_usage)
if [ "$DISK_USAGE" -gt 80 ]; then
    log_message "ATTENZIONE: Spazio disco ancora sopra 80% ($DISK_USAGE%). Pulizia aggressiva..."
    
    # Rimuovi TUTTE le immagini non in uso
    docker image prune -a -f 2>&1 | tee -a "$LOG_FILE"
    
    # Pulizia totale del sistema (più aggressiva)
    docker system prune -a -f --volumes 2>&1 | tee -a "$LOG_FILE"
fi

# Report finale
log_message "Uso disco dopo la pulizia: $(get_disk_usage)%"
log_message "Spazio Docker dopo:"
get_docker_usage >> "$LOG_FILE"
log_message "========== Pulizia completata =========="

# Mantieni solo gli ultimi 30 giorni di log
find /var/log -name "docker-cleanup.log*" -mtime +30 -delete

# Ruota il log se supera i 10MB
if [ -f "$LOG_FILE" ] && [ $(stat -c%s "$LOG_FILE") -gt 10485760 ]; then
    mv "$LOG_FILE" "$LOG_FILE.$(date +%Y%m%d)"
    gzip "$LOG_FILE.$(date +%Y%m%d)"
fi
