---
- name: Get existing whitelist domains
  ansible.builtin.uri:
    url: "{{ pihole.api_url }}/api/lists/whitelist"
    method: GET
    headers:
      X-FTL-SID: "{{ pihole.api_key }}"
    return_content: yes
  register: existing_whitelist

- name: Create lookup dict for existing whitelist
  ansible.builtin.set_fact:
    existing_whitelist_dict: "{{ dict(existing_whitelist.json.whitelist | default([]) | 
                                 map(attribute='domain') | 
                                 zip(existing_whitelist.json.whitelist | default([]))) }}"

- name: Create lookup dict for desired whitelist
  ansible.builtin.set_fact:
    desired_whitelist_dict: "{{ dict(pihole.whitelist.domains | 
                                map(attribute='domain') | 
                                zip(pihole.whitelist.domains)) }}"

- name: Get list of existing whitelist domains
  ansible.builtin.set_fact:
    existing_whitelist_domains: "{{ existing_whitelist.json.whitelist | default([]) | map(attribute='domain') | list }}"

- name: Get list of desired whitelist domains
  ansible.builtin.set_fact:
    desired_whitelist_domains: "{{ pihole.whitelist.domains | map(attribute='domain') | list }}"

- name: Identify whitelist domains to add
  ansible.builtin.set_fact:
    whitelist_to_add: "{{ desired_whitelist_domains | difference(existing_whitelist_domains) }}"

- name: Identify whitelist domains to remove
  ansible.builtin.set_fact:
    whitelist_to_remove: "{{ existing_whitelist_domains | difference(desired_whitelist_domains) }}"

- name: Identify whitelist domains to update
  ansible.builtin.set_fact:
    whitelist_to_update: []

- name: Check for whitelist domains needing updates
  ansible.builtin.set_fact:
    whitelist_to_update: "{{ whitelist_to_update + [item] }}"
  loop: "{{ desired_whitelist_domains | intersect(existing_whitelist_domains) }}"
  when: 
    - existing_whitelist_dict[item].enabled != (desired_whitelist_dict[item].enabled | default(true) | int) or
      existing_whitelist_dict[item].comment != (desired_whitelist_dict[item].comment | default(''))

- name: Add new whitelist domains
  ansible.builtin.uri:
    url: "{{ pihole.api_url }}/api/lists/whitelist"
    method: POST
    headers:
      X-FTL-SID: "{{ pihole.api_key }}"
      Content-Type: "application/json"
    body_format: json
    body:
      domain: "{{ desired_whitelist_dict[item].domain }}"
      enabled: "{{ desired_whitelist_dict[item].enabled | default(true) }}"
      comment: "{{ desired_whitelist_dict[item].comment | default('') }}"
    status_code: [200, 201]
  loop: "{{ whitelist_to_add }}"
  when: whitelist_to_add | length > 0

- name: Update existing whitelist domains
  ansible.builtin.uri:
    url: "{{ pihole.api_url }}/api/lists/whitelist/{{ existing_whitelist_dict[item].id }}"
    method: PUT
    headers:
      X-FTL-SID: "{{ pihole.api_key }}"
      Content-Type: "application/json"
    body_format: json
    body:
      enabled: "{{ desired_whitelist_dict[item].enabled | default(true) }}"
      comment: "{{ desired_whitelist_dict[item].comment | default('') }}"
    status_code: [200, 204]
  loop: "{{ whitelist_to_update }}"
  when: whitelist_to_update | length > 0

- name: Remove obsolete whitelist domains
  ansible.builtin.uri:
    url: "{{ pihole.api_url }}/api/lists/whitelist/{{ existing_whitelist_dict[item].id }}"
    method: DELETE
    headers:
      X-FTL-SID: "{{ pihole.api_key }}"
    status_code: [200, 204]
  loop: "{{ whitelist_to_remove }}"
  when: whitelist_to_remove | length > 0

- name: Display whitelist domains changes summary
  ansible.builtin.debug:
    msg:
      - "Whitelist domains added: {{ whitelist_to_add | length }}"
      - "Whitelist domains updated: {{ whitelist_to_update | length }}"
      - "Whitelist domains removed: {{ whitelist_to_remove | length }}"
  when: (whitelist_to_add | length > 0) or (whitelist_to_update | length > 0) or (whitelist_to_remove | length > 0)
