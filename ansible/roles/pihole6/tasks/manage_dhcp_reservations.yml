---
- name: Get existing DHCP reservations
  ansible.builtin.uri:
    url: "{{ pihole.api_url }}/api/dhcp/static"
    method: GET
    headers:
      X-FTL-SID: "{{ pihole.api_key }}"
    return_content: true
  register: existing_dhcp_reservations

- name: Parse existing DHCP reservations (by MAC address)
  ansible.builtin.set_fact:
    existing_dhcp_map: "{{ existing_dhcp_reservations.json.dhcp_static | default([]) | 
                           map(attribute='hwaddr') | 
                           map('lower') | list }}"

- name: Build desired DHCP reservations map
  ansible.builtin.set_fact:
    desired_dhcp_macs: "{{ pihole.dhcp_reservations | 
                           map(attribute='mac') | 
                           map('lower') | list }}"

- name: Create lookup dict for existing reservations
  ansible.builtin.set_fact:
    existing_reservations_dict: "{{ dict(existing_dhcp_reservations.json.dhcp_static | default([]) | 
                                    map(attribute='hwaddr') | map('lower') | 
                                    zip(existing_dhcp_reservations.json.dhcp_static | default([]))) }}"

- name: Create lookup dict for desired reservations
  ansible.builtin.set_fact:
    desired_reservations_dict: "{{ dict(pihole.dhcp_reservations | 
                                   map(attribute='mac') | map('lower') | 
                                   zip(pihole.dhcp_reservations)) }}"

- name: Identify DHCP reservations to add
  ansible.builtin.set_fact:
    dhcp_to_add: "{{ desired_dhcp_macs | difference(existing_dhcp_map) }}"

- name: Identify DHCP reservations to remove
  ansible.builtin.set_fact:
    dhcp_to_remove: "{{ existing_dhcp_map | difference(desired_dhcp_macs) }}"

- name: Identify DHCP reservations to update
  ansible.builtin.set_fact:
    dhcp_to_update: []

- name: Check for reservations needing updates
  ansible.builtin.set_fact:
    dhcp_to_update: "{{ dhcp_to_update + [item] }}"
  loop: "{{ desired_dhcp_macs | intersect(existing_dhcp_map) }}"
  when:
    - existing_reservations_dict[item].ip != desired_reservations_dict[item].ip or
      existing_reservations_dict[item].hostname != desired_reservations_dict[item].hostname

- name: Add new DHCP reservations
  ansible.builtin.uri:
    url: "{{ pihole.api_url }}/api/dhcp/static"
    method: POST
    headers:
      X-FTL-SID: "{{ pihole.api_key }}"
      Content-Type: "application/json"
    body_format: json
    body:
      hwaddr: "{{ desired_reservations_dict[item].mac }}"
      ip: "{{ desired_reservations_dict[item].ip }}"
      hostname: "{{ desired_reservations_dict[item].hostname }}"
    status_code: [200, 201]
  loop: "{{ dhcp_to_add }}"
  when: dhcp_to_add | length > 0
  register: dhcp_add_result

- name: Update existing DHCP reservations
  ansible.builtin.uri:
    url: "{{ pihole.api_url }}/api/dhcp/static/{{ existing_reservations_dict[item].id }}"
    method: PUT
    headers:
      X-FTL-SID: "{{ pihole.api_key }}"
      Content-Type: "application/json"
    body_format: json
    body:
      hwaddr: "{{ desired_reservations_dict[item].mac }}"
      ip: "{{ desired_reservations_dict[item].ip }}"
      hostname: "{{ desired_reservations_dict[item].hostname }}"
    status_code: [200, 204]
  loop: "{{ dhcp_to_update }}"
  when: dhcp_to_update | length > 0
  register: dhcp_update_result

- name: Remove obsolete DHCP reservations
  ansible.builtin.uri:
    url: "{{ pihole.api_url }}/api/dhcp/static/{{ existing_reservations_dict[item].id }}"
    method: DELETE
    headers:
      X-FTL-SID: "{{ pihole.api_key }}"
    status_code: [200, 204]
  loop: "{{ dhcp_to_remove }}"
  when: dhcp_to_remove | length > 0
  register: dhcp_remove_result

- name: Display DHCP changes summary
  ansible.builtin.debug:
    msg:
      - "DHCP reservations added: {{ dhcp_to_add | length }}"
      - "DHCP reservations updated: {{ dhcp_to_update | length }}"
      - "DHCP reservations removed: {{ dhcp_to_remove | length }}"
  when: (dhcp_to_add | length > 0) or (dhcp_to_update | length > 0) or (dhcp_to_remove | length > 0)
