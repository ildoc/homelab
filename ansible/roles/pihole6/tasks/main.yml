---
# ansible/roles/pihole6/tasks/main.yml

- name: Ensure required variables are defined
  ansible.builtin.assert:
    that:
      - pihole.api_key is defined
      - pihole.api_url is defined
    fail_msg: "pihole.api_key and pihole.api_url must be defined"

# DNS Records (gestione speciale, non ha ID)
- name: Manage DNS records via API
  ansible.builtin.include_tasks: manage_dns_records.yml
  tags: ['dns']

# DHCP Reservations (gestione speciale per MAC address)
- name: Manage DHCP reservations via API
  ansible.builtin.include_tasks: manage_dhcp_reservations.yml
  tags: ['dhcp']

# Adlists
- name: Manage Adlists via API
  ansible.builtin.include_tasks: manage_pihole_resource.yml
  vars:
    resource_name: "adlists"
    api_endpoint: "lists/adlist"
    response_key: "adlists"
    key_attribute: "address"
    desired_resources: "{{ pihole.adlists }}"
    trigger_gravity: true
  when: pihole.adlists is defined
  tags: ['adlists', 'lists']

# Whitelist Domains
- name: Manage Whitelist domains via API
  ansible.builtin.include_tasks: manage_pihole_resource.yml
  vars:
    resource_name: "whitelist domains"
    api_endpoint: "lists/whitelist"
    response_key: "whitelist"
    key_attribute: "domain"
    desired_resources: "{{ pihole.whitelist.domains }}"
  when: pihole.whitelist.domains is defined
  tags: ['whitelist', 'lists']

# Whitelist Regex
- name: Manage Whitelist regex via API
  ansible.builtin.include_tasks: manage_pihole_resource.yml
  vars:
    resource_name: "whitelist regex"
    api_endpoint: "lists/regex/white"
    response_key: "regex"
    key_attribute: "domain"
    desired_resources: "{{ pihole.whitelist.regex }}"
  when: pihole.whitelist.regex is defined
  tags: ['whitelist', 'lists']

# Blacklist Domains
- name: Manage Blacklist domains via API
  ansible.builtin.include_tasks: manage_pihole_resource.yml
  vars:
    resource_name: "blacklist domains"
    api_endpoint: "lists/blacklist"
    response_key: "blacklist"
    key_attribute: "domain"
    desired_resources: "{{ pihole.blacklist.domains }}"
  when: pihole.blacklist.domains is defined
  tags: ['blacklist', 'lists']

# Blacklist Regex
- name: Manage Blacklist regex via API
  ansible.builtin.include_tasks: manage_pihole_resource.yml
  vars:
    resource_name: "blacklist regex"
    api_endpoint: "lists/regex/black"
    response_key: "regex"
    key_attribute: "domain"
    desired_resources: "{{ pihole.blacklist.regex }}"
  when: pihole.blacklist.regex is defined
  tags: ['blacklist', 'lists']

- name: Update gravity if lists changed
  ansible.builtin.include_tasks: update_gravity.yml
  when: adlists_changed is defined and adlists_changed
  tags: ['gravity', 'lists']

- name: Check and update Pi-hole
  ansible.builtin.include_tasks: update_pihole.yml
  when: pihole.check_updates | default(true)
  tags: ['updates']
