---
- name: Get existing adlists
  ansible.builtin.uri:
    url: "{{ pihole.api_url }}/api/lists/adlist"
    method: GET
    headers:
      X-FTL-SID: "{{ pihole.api_key }}"
    return_content: true
  register: existing_adlists

- name: Create lookup dict for existing adlists
  ansible.builtin.set_fact:
    existing_adlists_dict: "{{ dict(existing_adlists.json.adlists | default([]) | 
                               map(attribute='address') | 
                               zip(existing_adlists.json.adlists | default([]))) }}"

- name: Create lookup dict for desired adlists
  ansible.builtin.set_fact:
    desired_adlists_dict: "{{ dict(pihole.adlists | 
                              map(attribute='url') | 
                              zip(pihole.adlists)) }}"

- name: Get list of existing adlist URLs
  ansible.builtin.set_fact:
    existing_adlist_urls: "{{ existing_adlists.json.adlists | default([]) | map(attribute='address') | list }}"

- name: Get list of desired adlist URLs
  ansible.builtin.set_fact:
    desired_adlist_urls: "{{ pihole.adlists | map(attribute='url') | list }}"

- name: Identify adlists to add
  ansible.builtin.set_fact:
    adlists_to_add: "{{ desired_adlist_urls | difference(existing_adlist_urls) }}"

- name: Identify adlists to remove
  ansible.builtin.set_fact:
    adlists_to_remove: "{{ existing_adlist_urls | difference(desired_adlist_urls) }}"

- name: Identify adlists to update
  ansible.builtin.set_fact:
    adlists_to_update: []

- name: Check for adlists needing updates
  ansible.builtin.set_fact:
    adlists_to_update: "{{ adlists_to_update + [item] }}"
  loop: "{{ desired_adlist_urls | intersect(existing_adlist_urls) }}"
  when:
    - existing_adlists_dict[item].enabled != (desired_adlists_dict[item].enabled | default(true) | int) or
      existing_adlists_dict[item].comment != (desired_adlists_dict[item].comment | default(''))

- name: Add new adlists
  ansible.builtin.uri:
    url: "{{ pihole.api_url }}/api/lists/adlist"
    method: POST
    headers:
      X-FTL-SID: "{{ pihole.api_key }}"
      Content-Type: "application/json"
    body_format: json
    body:
      address: "{{ desired_adlists_dict[item].url }}"
      enabled: "{{ desired_adlists_dict[item].enabled | default(true) }}"
      comment: "{{ desired_adlists_dict[item].comment | default('') }}"
    status_code: [200, 201]
  loop: "{{ adlists_to_add }}"
  when: adlists_to_add | length > 0
  register: adlists_add_result

- name: Update existing adlists
  ansible.builtin.uri:
    url: "{{ pihole.api_url }}/api/lists/adlist/{{ existing_adlists_dict[item].id }}"
    method: PUT
    headers:
      X-FTL-SID: "{{ pihole.api_key }}"
      Content-Type: "application/json"
    body_format: json
    body:
      enabled: "{{ desired_adlists_dict[item].enabled | default(true) }}"
      comment: "{{ desired_adlists_dict[item].comment | default('') }}"
    status_code: [200, 204]
  loop: "{{ adlists_to_update }}"
  when: adlists_to_update | length > 0
  register: adlists_update_result

- name: Remove obsolete adlists
  ansible.builtin.uri:
    url: "{{ pihole.api_url }}/api/lists/adlist/{{ existing_adlists_dict[item].id }}"
    method: DELETE
    headers:
      X-FTL-SID: "{{ pihole.api_key }}"
    status_code: [200, 204]
  loop: "{{ adlists_to_remove }}"
  when: adlists_to_remove | length > 0
  register: adlists_remove_result

- name: Set flag for gravity update
  ansible.builtin.set_fact:
    adlists_changed: true
  when: (adlists_to_add | length > 0) or (adlists_to_update | length > 0) or (adlists_to_remove | length > 0)

- name: Display adlists changes summary
  ansible.builtin.debug:
    msg:
      - "Adlists added: {{ adlists_to_add | length }}"
      - "Adlists updated: {{ adlists_to_update | length }}"
      - "Adlists removed: {{ adlists_to_remove | length }}"
  when: (adlists_to_add | length > 0) or (adlists_to_update | length > 0) or (adlists_to_remove | length > 0)
