---
- name: Leggi il file dhcp.leases
  ansible.builtin.slurp:
    src: /etc/pihole/dhcp.leases
  register: dhcp_leases_content

- name: Converti il contenuto del file in una lista di righe
  ansible.builtin.set_fact:
    dhcp_leases_lines: "{{ dhcp_leases_content.content | b64decode | split('\n') }}"

- name: Filter existing leases based on dhcp reservations
  ansible.builtin.set_fact:
    filtered_leases: []

- name: Crea una lista di stringhe "mac ip" da pihole.dhcp_reservations
  ansible.builtin.set_fact:
    mac_ip_list: >-
      {{ pihole.dhcp_reservations | map(attribute='mac') | map('lower') | zip(pihole.dhcp_reservations | map(attribute='ip')) | map('join', ' ') | list }}

- name: Ottieni lease non riservati
  ansible.builtin.set_fact:
    filtered_leases: >-
      {{ filtered_leases + (dhcp_leases_lines | reject('equalto', '') | select('match', '^((?!' + mac_ip_list | join('|') + ').)*$') | list) }}

- name: Ottieni lease riservati
  ansible.builtin.set_fact:
    filtered_leases: >-
      {{ filtered_leases + (dhcp_leases_lines | select('search', '(?:' + (mac_ip_list | join('|')) + ')') | list) }}

- name: Crea una lista di lease mancanti
  ansible.builtin.set_fact:
    filtered_leases: >-
      {{ filtered_leases + [(ansible_date_time.epoch + ' ' + item.mac | lower + ' ' + item.ip + ' ' + item.hostname + ' *')] }}
  loop: "{{ pihole.dhcp_reservations }}"
  when: not (dhcp_leases_lines | select('search', item.mac | lower + ' ' + item.ip) | list | length > 0)

- name: Scrivi il nuovo file dhcp.leases
  ansible.builtin.copy:
    dest: /etc/pihole/dhcp.leases
    content: "{{ filtered_leases | join('\n') }}"
    mode: '0644'
