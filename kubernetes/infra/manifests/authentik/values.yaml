---
# Global configuration
global:
  storageClass: nfs-csi

# Authentik Core Configuration
authentik:
  # Secret key - verrà iniettato tramite variabile d'ambiente AUTHENTIK_SECRET_KEY
  secret_key: ""  
  
  # Log level
  log_level: info
  
  # Avatars
  avatars: gravatar,initials
  
  # Error reporting - disabilitato per produzione
  error_reporting:
    enabled: false
  
  # PostgreSQL ESTERNO
  postgresql:
    host: "192.168.0.30"
    port: 5432
    name: "authentik_db"
    user: "authentik_user"
    password: ""  # Verrà iniettato tramite AUTHENTIK_POSTGRESQL__PASSWORD
  
  # Redis ESTERNO
  redis:
    host: "192.168.0.40"
    port: 6379
    password: ""  # Verrà iniettato tramite AUTHENTIK_REDIS__PASSWORD
  
  # Email configuration (opzionale)
  email:
    host: ""
    port: 587
    username: ""
    use_tls: false
    use_ssl: false
    timeout: 30
    from: "authentik@local.ildoc.it"

# Server deployment
server:
  replicas: 2
  
  # Inietta i secrets come variabili d'ambiente usando valueFrom
  env:
    - name: AUTHENTIK_SECRET_KEY
      valueFrom:
        secretKeyRef:
          name: authentik-secret
          key: AUTHENTIK_SECRET_KEY
    - name: AUTHENTIK_POSTGRESQL__PASSWORD
      valueFrom:
        secretKeyRef:
          name: authentik-postgresql-secret
          key: AUTHENTIK_POSTGRESQL__PASSWORD
    - name: AUTHENTIK_REDIS__PASSWORD
      valueFrom:
        secretKeyRef:
          name: authentik-redis-secret
          key: AUTHENTIK_REDIS__PASSWORD
  
  resources:
    requests:
      cpu: 100m
      memory: 512Mi
    limits:
      cpu: 1000m
      memory: 2Gi
  
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/name: authentik
                app.kubernetes.io/component: server
            topologyKey: kubernetes.io/hostname
  
  metrics:
    enabled: true
    serviceMonitor:
      enabled: false
  
  # Disabilita Ingress - useremo HTTPRoute (definito nei templates)
  ingress:
    enabled: false

# Worker deployment
worker:
  replicas: 2
  
  # Inietta i secrets come variabili d'ambiente usando valueFrom
  env:
    - name: AUTHENTIK_SECRET_KEY
      valueFrom:
        secretKeyRef:
          name: authentik-secret
          key: AUTHENTIK_SECRET_KEY
    - name: AUTHENTIK_POSTGRESQL__PASSWORD
      valueFrom:
        secretKeyRef:
          name: authentik-postgresql-secret
          key: AUTHENTIK_POSTGRESQL__PASSWORD
    - name: AUTHENTIK_REDIS__PASSWORD
      valueFrom:
        secretKeyRef:
          name: authentik-redis-secret
          key: AUTHENTIK_REDIS__PASSWORD
  
  resources:
    requests:
      cpu: 100m
      memory: 512Mi
    limits:
      cpu: 500m
      memory: 1Gi
  
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/name: authentik
                app.kubernetes.io/component: worker
            topologyKey: kubernetes.io/hostname
  
  # Metriche worker (nuovo in 2025.8)
  metrics:
    enabled: true
    serviceMonitor:
      enabled: false

# PostgreSQL subchart - DISABILITATO (usi PostgreSQL esterno)
postgresql:
  enabled: false

# Redis subchart - DISABILITATO (usi Redis esterno)
redis:
  enabled: false

# ServiceAccount
serviceAccount:
  create: true
  annotations: {}

# Configurazioni custom per il wrapper chart
ingress:
  hostname: auth.local.ildoc.it

smtp:
  enabled: false

# Configurazione Outpost per forward auth
outpost:
  replicas: 2
  image:
    tag: "2025.8.4"
  resources:
    requests:
      cpu: 50m
      memory: 128Mi
    limits:
      cpu: 200m
      memory: 256Mi
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/name: authentik-proxy-outpost
            topologyKey: kubernetes.io/hostname
