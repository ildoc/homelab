gateway:
  enabled: true
  name: cilium-gateway
  namespace: kube-system
  hostname: argocd.local.ildoc.it

argo-cd:
  global:
    domain: argocd.local.ildoc.it

  redis-ha:
    enabled: true
    haproxy:
      enabled: true

  controller:
    replicas: 1

  server:
    replicas: 2
    ingress:
      enabled: false

  repoServer:
    replicas: 2

  applicationSet:
    replicas: 2

  configs:
    cm:
      timeout.reconciliation: 180s
      
      # URL base di ArgoCD
      url: https://argocd.local.ildoc.it
      
      # Configurazione DEX per Authentik (permette uso CLI)
      dex.config: |
        connectors:
        - config:
            issuer: https://auth.ildoc.it/application/o/argocd/
            clientID: QJvMPH0bco4sp7NvqtvfWJLUZQJaVYDHt0Dtow4Z
            clientSecret: $dex.authentik.clientSecret
            insecureEnableGroups: true
            scopes:
              - openid
              - profile
              - email
          name: authentik
          type: oidc
          id: authentik
      
      # Health check per le EndpointSlices
      resource.customizations.health.discovery.k8s.io_EndpointSlice: |
        hs = {}
        hs.status = "Healthy"
        hs.message = "EndpointSlice is present"
        return hs
    
    params:
      server.insecure: "true"
      application.resourceTrackingMethod: "annotation"
    
    # RBAC policy per mappare i gruppi di Authentik
    rbac:
      policy.csv: |
        # Mappatura gruppi Authentik -> Ruoli ArgoCD
        g, argocd-admins, role:admin
        g, argocd-readonly, role:readonly
    
    # Secret contenente le credenziali DEX
    secret:
      createSecret: false
      extra:
        dex.authentik.clientSecret: ""
    
    # Inclusione ristretta solo al namespace external-routes
    resource.inclusions: |
      - apiGroups:
        - discovery.k8s.io
        kinds:
        - EndpointSlice
        clusters:
        - '*'
        namespaces:
        - external-routes
