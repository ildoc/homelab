{{- if .Values.gateway.enabled }}
---
# ServiceAccount per il Gateway
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Values.gateway.name }}
  namespace: {{ .Values.gateway.namespace }}

---
# Deployment del Gateway (Istio injecta Envoy come sidecar)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.gateway.name }}
  namespace: {{ .Values.gateway.namespace }}
  labels:
    app: {{ .Values.gateway.name }}
    istio: external-gateway
spec:
  replicas: 2
  selector:
    matchLabels:
      app: {{ .Values.gateway.name }}
      istio: external-gateway
  template:
    metadata:
      annotations:
        # Usa il template gateway per injection
        inject.istio.io/templates: gateway
      labels:
        app: {{ .Values.gateway.name }}
        istio: external-gateway
        sidecar.istio.io/inject: "true"
    spec:
      serviceAccountName: {{ .Values.gateway.name }}
      securityContext:
        # Permetti binding su porte < 1024 senza root
        sysctls:
        - name: net.ipv4.ip_unprivileged_port_start
          value: "0"
      containers:
      - name: istio-proxy
        image: auto  # Istio injecta l'immagine corretta
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi

---
# Service LoadBalancer gestito da Cilium
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.gateway.name }}
  namespace: {{ .Values.gateway.namespace }}
  labels:
    app: {{ .Values.gateway.name }}
    istio: external-gateway
  annotations:
    # IMPORTANTE: dice a Cilium di usare questo IP specifico
    io.cilium/lb-ipam-ips: {{ .Values.gateway.loadBalancerIP | quote }}
spec:
  type: LoadBalancer
  loadBalancerIP: {{ .Values.gateway.loadBalancerIP }}
  selector:
    app: {{ .Values.gateway.name }}
    istio: external-gateway
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8080
  - name: https
    port: 443
    protocol: TCP
    targetPort: 8443

---
# Gateway usando K8s Gateway API (non quella Istio legacy)
apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  name: {{ .Values.gateway.name }}
  namespace: {{ .Values.gateway.namespace }}
  annotations:
    argocd.argoproj.io/sync-wave: "0"
spec:
  gatewayClassName: istio  # Istio implementa le K8s Gateway API
  listeners:
  - name: http
    hostname: "*.local.ildoc.it"
    port: 80
    protocol: HTTP
    allowedRoutes:
      namespaces:
        from: All
  
  - name: https
    hostname: "*.local.ildoc.it"
    port: 443
    protocol: HTTPS
    allowedRoutes:
      namespaces:
        from: All
    tls:
      mode: Terminate
      certificateRefs:
      - name: {{ .Values.gateway.tls.secretName }}
        namespace: {{ .Values.gateway.tls.secretNamespace }}
        group: ""
        kind: Secret

---
# ReferenceGrant per accedere al certificato in default namespace
apiVersion: gateway.networking.k8s.io/v1beta1
kind: ReferenceGrant
metadata:
  name: allow-istio-gateway-cert
  namespace: {{ .Values.gateway.tls.secretNamespace }}
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  from:
  - group: gateway.networking.k8s.io
    kind: Gateway
    namespace: {{ .Values.gateway.namespace }}
  to:
  - group: ""
    kind: Secret
    name: {{ .Values.gateway.tls.secretName }}
{{- end }}
