---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: vault-credentials-renewal
  namespace: {{ .Release.Namespace }}
  annotations:
    argocd.argoproj.io/sync-wave: "4"
spec:
  # Esegui abbastanza frequentemente per prevenire la scadenza del token
  # Se TTL è 1h, potrebbe essere necessario eseguirlo ogni 30 minuti
  schedule: "0 0 1,15 * *"  # Esegue ogni 30 minuti
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: {{ index .Values "external-secrets" "serviceAccount" "name" }}
          automountServiceAccountToken: true
          containers:
            - name: vault-renew-config
              image: alpine/k8s:1.31.7
              command: ["/bin/sh", "-c"]
              args:
                - |
                  set -euo pipefail

                  exec > /dev/stdout
                  exec 2> /dev/stderr

                  echo "[INFO] Starting Vault credentials renewal job..."

                  VAULT_SA_NAME='{{ index .Values "external-secrets" "serviceAccount" "name" }}'
                  VAULT_SA_NAMESPACE="{{ .Release.Namespace }}"
                  VAULT_ROLE_NAME="{{ .Values.vault.roleName }}"
                  VAULT_ADDRESS="{{ .Values.vault.address }}"
                  KUBE_API="{{ .Values.apiServer }}"

                  echo "[INFO] Building in-cluster kubeconfig..."
                  cat <<EOF > /tmp/kubeconfig
                  apiVersion: v1
                  kind: Config
                  clusters:
                  - cluster:
                      certificate-authority: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                      server: https://kubernetes.default.svc
                    name: in-cluster
                  contexts:
                  - context:
                      cluster: in-cluster
                      user: default
                    name: in-cluster-context
                  current-context: in-cluster-context
                  users:
                  - name: default
                    user:
                      token: $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
                  EOF

                  export KUBECONFIG=/tmp/kubeconfig

                  echo "[INFO] Creating JWT token for authentication..."
                  TOKEN_REVIEWER_JWT=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)

                  # Tentativo di login con il token corrente del service account
                  echo "[INFO] Authenticating with Vault using Kubernetes auth..."
                  AUTH_RESULT=$(curl -sk --request POST \
                    --data "{\"jwt\": \"$TOKEN_REVIEWER_JWT\", \"role\": \"$VAULT_ROLE_NAME\"}" \
                    $VAULT_ADDRESS/v1/auth/kubernetes/login)

                  # Estrarre il client_token dal risultato dell'autenticazione
                  VAULT_TOKEN=$(echo $AUTH_RESULT | grep -o '"client_token":"[^"]*' | sed 's/"client_token":"//')

                  if [ -z "$VAULT_TOKEN" ]; then
                    echo "[ERROR] Authentication failed. Cannot proceed with renewal."
                    echo "Auth result: $AUTH_RESULT"
                    exit 1
                  fi

                  echo "[INFO] Successfully authenticated with Vault."

                  # Utilizziamo il token ottenuto per eseguire ulteriori operazioni
                  # Se necessario, aggiorniamo la configurazione Kubernetes in Vault

                  # Ottieni le informazioni sul token per verificare la scadenza
                  TOKEN_INFO=$(curl -sk -H "X-Vault-Token: $VAULT_TOKEN" \
                    $VAULT_ADDRESS/v1/auth/token/lookup-self)

                  # Se il token è in scadenza, possiamo estenderne la durata
                  curl -sk -H "X-Vault-Token: $VAULT_TOKEN" \
                    -X POST $VAULT_ADDRESS/v1/auth/token/renew-self > /dev/null

                  # Otteniamo un nuovo JWT token per aggiornare la configurazione
                  NEW_JWT=$(kubectl create token $VAULT_SA_NAME -n $VAULT_SA_NAMESPACE)
                  KUBE_CA_CERT=$(awk '{printf "%s\\n", $0}' /var/run/secrets/kubernetes.io/serviceaccount/ca.crt)

                  # Aggiorna la config di Kubernetes Auth in Vault
                  echo "[INFO] Updating Vault's Kubernetes auth configuration..."
                  KUBE_AUTH_UPDATE=$(curl -sk -H "X-Vault-Token: $VAULT_TOKEN" -X POST \
                    $VAULT_ADDRESS/v1/auth/kubernetes/config \
                    -d @<(cat <<EOF
                  {
                    "token_reviewer_jwt": "$NEW_JWT",
                    "kubernetes_host": "$KUBE_API",
                    "kubernetes_ca_cert": "$KUBE_CA_CERT"
                  }
                  EOF
                  ))

                  # Verifica il risultato dell'aggiornamento
                  if echo "$KUBE_AUTH_UPDATE" | grep -q "errors"; then
                    echo "[WARNING] Failed to update Kubernetes auth config: $KUBE_AUTH_UPDATE"
                    echo "[WARNING] The service account may not have sufficient permissions."
                    echo "[WARNING] You may need to create a dedicated operator token."
                  else
                    echo "[INFO] Successfully updated Kubernetes auth configuration."
                  fi

                  # Non possiamo aggiornare il ruolo senza permessi adeguati
                  # Ma possiamo verificare che l'autenticazione funzioni con il nuovo JWT
                  echo "[INFO] Testing authentication with a newly created JWT token..."
                  AUTH_TEST=$(curl -sk --request POST \
                    --data "{\"jwt\": \"$NEW_JWT\", \"role\": \"$VAULT_ROLE_NAME\"}" \
                    $VAULT_ADDRESS/v1/auth/kubernetes/login)

                  if echo "$AUTH_TEST" | grep -q "auth"; then
                    echo "[INFO] Authentication test successful. The current configuration is working."
                  else
                    echo "[WARNING] Authentication test with new JWT failed."
                    echo "Auth test response: $AUTH_TEST"
                    echo "[WARNING] May need admin intervention to check role settings."
                  fi

                  echo "[INFO] Vault credentials renewal process completed."
          restartPolicy: OnFailure
          