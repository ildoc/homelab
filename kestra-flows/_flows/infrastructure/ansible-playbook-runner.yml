id: ansible_playbook_runner
namespace: infrastructure
description: Flow generico per eseguire qualsiasi playbook Ansible

inputs:
  - id: playbook_path
    type: STRING
    required: true
    description: "Percorso del playbook (es: ansible/db.yml)"
  
  - id: git_branch
    type: STRING
    defaults: "main"
  
  - id: inventory
    type: STRING
    defaults: "inventory/hosts.ini"
    description: "File inventory"
  
  - id: limit_hosts
    type: STRING
    required: false
  
  - id: tags
    type: STRING
    required: false
  
  - id: skip_tags
    type: STRING
    required: false
  
  - id: extra_vars
    type: JSON
    required: false
    description: "Extra vars JSON (es: {\"db_host\":\"192.168.0.30\"})"
  
  - id: check_mode
    type: BOOLEAN
    defaults: false
  
  - id: verbose_level
    type: SELECT
    values:
      - "normal"
      - "verbose"
      - "very_verbose"
      - "debug"
    defaults: "normal"

tasks:
  - id: validate_inputs
    type: io.kestra.plugin.core.log.Log
    message: |
      Starting Ansible playbook execution
      Playbook: {{ inputs.playbook_path }}
      Branch: {{ inputs.git_branch }}
      Inventory: {{ inputs.inventory }}
  
  - id: clone_repo
    type: io.kestra.plugin.git.Clone
    url: https://gitlab.local.ildoc.it/ildoc/homelab.git
    branch: "{{ inputs.git_branch }}"
    username: git
    password: "{{ secret('GITLAB_TOKEN') }}"
  
  - id: run_ansible
    type: io.kestra.plugin.scripts.shell.Commands
    taskRunner:
      type: io.kestra.plugin.scripts.runner.docker.Docker
      image: registry.gitlab.local.ildoc.it/devops/ansible-vault:latest
      pullPolicy: ALWAYS
    
    env:
      VAULT_ADDR: "https://vault.local.ildoc.it"
      VAULT_ROLE_ID: "{{ secret('VAULT_ROLE_ID') }}"
      VAULT_SECRET_ID: "{{ secret('VAULT_SECRET_ID') }}"
      ANSIBLE_FORCE_COLOR: "true"
      ANSIBLE_HOST_KEY_CHECKING: "false"
      ANSIBLE_STDOUT_CALLBACK: "yaml"
    
    commands:
      - cd {{ outputs.clone_repo.directory }}
      - |
        # Verbosity
        VERBOSE=""
        case "{{ inputs.verbose_level }}" in
          "verbose") VERBOSE="-v" ;;
          "very_verbose") VERBOSE="-vv" ;;
          "debug") VERBOSE="-vvv" ;;
        esac
        
        # Build command
        CMD="ansible-playbook {{ inputs.playbook_path }} -i {{ inputs.inventory }} $VERBOSE"
        
        {% if inputs.check_mode %}
        CMD="$CMD --check --diff"
        {% endif %}
        
        {% if inputs.limit_hosts %}
        CMD="$CMD --limit '{{ inputs.limit_hosts }}'"
        {% endif %}
        
        {% if inputs.tags %}
        CMD="$CMD --tags '{{ inputs.tags }}'"
        {% endif %}
        
        {% if inputs.skip_tags %}
        CMD="$CMD --skip-tags '{{ inputs.skip_tags }}'"
        {% endif %}
        
        {% if inputs.extra_vars %}
        CMD="$CMD --extra-vars '{{ inputs.extra_vars | json }}'"
        {% endif %}
        
        echo "========================================="
        echo "Executing: $CMD"
        echo "========================================="
        echo ""
        
        eval $CMD
        EXIT_CODE=$?
        
        echo ""
        echo "========================================="
        echo "Exit code: $EXIT_CODE"
        echo "========================================="        
        exit $EXIT_CODE
    
    retry:
      type: constant
      interval: PT1M
      maxAttempt: 2

  - id: summary
    type: io.kestra.plugin.core.log.Log
    message: |
      ✅ Playbook execution completed
      Playbook: {{ inputs.playbook_path }}
      Duration: {{ execution.duration }}
      {% if inputs.check_mode %}Mode: DRY-RUN{% else %}Mode: APPLIED{% endif %}

errors:
  - id: error_handler
    type: io.kestra.plugin.core.log.Log
    message: |
      ❌ Playbook execution failed
      Playbook: {{ inputs.playbook_path }}
      Error: {{ task.error }}
    level: ERROR

concurrency:
  behavior: QUEUE
  limit: 3

labels:
  type: ansible-runner
  env: production
