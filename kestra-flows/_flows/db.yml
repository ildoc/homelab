id: db_backup_daily
namespace: database
description: Backup giornaliero database usando Ansible

tasks:
  # Pre-check: verifica spazio disco
  - id: check_space
    type: io.kestra.plugin.core.log.Log
    message: "Starting daily database backup"
  
  # Esegui backup tramite subflow
  - id: run_backup_playbook
    type: io.kestra.plugin.core.flow.Subflow
    flowId: ansible_playbook_runner
    namespace: homelab.infrastructure
    inputs:
      playbook_path: "ansible/db.yml"
      git_branch: "main"
      inventory: "inventory/hosts.ini"
      tags: "backup"
      limit_hosts: "db"
      extra_vars:
        backup_type: "daily"
        retention_days: 7
      check_mode: false
      verbose_level: "verbose"
    wait: true
    transmitFailed: true
  
  # Verifica backup creato
  - id: verify_backup
    type: io.kestra.plugin.scripts.shell.Commands
    taskRunner:
      type: io.kestra.plugin.scripts.runner.docker.Docker
      image: postgres:16-alpine
    commands:
      - echo "Verifying backup was created..."
      - echo "Backup path from Ansible: {{ outputs.run_backup_playbook.outputs.ansible_stdout }}"
  
  # Notifica successo
  - id: notify_success
    type: io.kestra.plugin.core.flow.If
    condition: "{{ secret('SLACK_WEBHOOK') != null }}"
    then:
      - id: slack_notify
        type: io.kestra.plugin.notifications.slack.SlackIncomingWebhook
        url: "{{ secret('SLACK_WEBHOOK') }}"
        payload: |
          {
            "text": "✅ Daily DB Backup Completed",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Daily Database Backup*\n✅ Successfully completed\nDuration: {{ execution.duration }}"
                }
              }
            ]
          }

triggers:
  - id: daily_schedule
    type: io.kestra.plugin.core.trigger.Schedule
    cron: "0 2 * * *"  # Ogni giorno alle 2

errors:
  - id: notify_failure
    type: io.kestra.plugin.core.flow.If
    condition: "{{ secret('SLACK_WEBHOOK') != null }}"
    then:
      - id: slack_error
        type: io.kestra.plugin.notifications.slack.SlackIncomingWebhook
        url: "{{ secret('SLACK_WEBHOOK') }}"
        payload: |
          {
            "text": "❌ Daily DB Backup Failed",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Daily Database Backup*\n❌ Failed\nTask: {{ task.id }}"
                }
              }
            ]
          }

labels:
  type: backup
  category: database
  frequency: daily
