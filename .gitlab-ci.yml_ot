stages:
  - validate
  - plan
  - apply
  - cleanup

# Variabili globali per tutti i job
variables:
  # Variabili per OpenTofu
  VAULT_ADDR: "http://vault:8200"
  
  # Variabili Terraform specifiche
  TF_VAR_default_node: "pve01"
  TF_VAR_default_datastore: "vm"
  TF_VAR_network_bridge: "vmbr0"
  TF_VAR_proxmox_endpoint: ${PROXMOX_ENDPOINT}
  
  # Altre variabili globali
  GIT_STRATEGY: fetch

  TOFU_VERSION: "1.6.0"
  TF_STATE_NAME: "proxmox-infra"
  TOFU_DIR: "opentofu"  # Directory che contiene i file OpenTofu
  ALPINE_IMAGE: "alpine:3.21"  # Definito per Renovate

# Cache dei moduli OpenTofu
cache:
  key: ${CI_COMMIT_REF_SLUG}-opentofu
  paths:
    - ${TOFU_DIR}/.terraform

# Configurazione di base per i job OpenTofu
.tofu_base:
  image: ${ALPINE_IMAGE}
  before_script: |
    # Installazione OpenTofu e dipendenze
    apk add --no-cache curl unzip jq git bash ca-certificates iputils bind-tools
    curl -SL "https://github.com/opentofu/opentofu/releases/download/v${TOFU_VERSION}/tofu_${TOFU_VERSION}_linux_amd64.zip" -o /tmp/tofu.zip
    unzip /tmp/tofu.zip -d /usr/local/bin/
    rm /tmp/tofu.zip
    
    # Cambia nella directory OpenTofu
    echo "Entrando nella directory OpenTofu: ${TOFU_DIR}"
    cd "${TOFU_DIR}"
    
    # Configurazione backend GitLab con Project Access Token invece di CI_JOB_TOKEN
    cat > backend.tf << EOF
    terraform {
      backend "http" {
        address = "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${TF_STATE_NAME}"
        lock_address = "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${TF_STATE_NAME}/lock"
        unlock_address = "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${TF_STATE_NAME}/lock"
        username = "gitlab-ci-token"
        password = "${CI_PROJECT_ACCESS_TOKEN}"
        lock_method = "POST"
        unlock_method = "DELETE"
        retry_wait_min = 5
      }
    }
    EOF
    
    export TF_VAR_vault_approle_enabled=true
    export TF_VAR_vault_approle_role_id=${VAULT_ROLE_ID}
    export TF_VAR_vault_approle_secret_id=${VAULT_SECRET_ID}
    
    echo "Inizializzazione OpenTofu..."
    tofu init -reconfigure

# Validazione configurazione
tofu-validate:
  extends: .tofu_base
  stage: validate
  script: |
    echo "Validazione configurazione..."
    tofu validate
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: always

# Piano modifiche
tofu-plan:
  extends: .tofu_base
  stage: plan
  script: |
    echo "Creazione piano..."
    # Disabilita il log dettagliato per mostrare meglio i cambiamenti
    export TF_LOG=""
        
    # Creazione del piano
    tofu plan -out=plan.tfplan
    
    echo "Visualizzazione piano..."
    tofu show plan.tfplan > plan_human.txt || echo "Errore nella visualizzazione del piano"
    tofu show -json plan.tfplan > plan.json || echo "Errore nella conversione JSON del piano"
    
    # Crea un riassunto del piano piÃ¹ visibile
    echo "=== RIASSUNTO DEL PIANO ===" > plan_summary.txt
    if [ -s plan.json ]; then
      jq -r '.resource_changes[] | "\(.address) will be \(.change.actions[0])"' plan.json >> plan_summary.txt 2>/dev/null || echo "Nessuna modifica rilevata" >> plan_summary.txt
    else
      echo "File piano JSON vuoto o invalido" >> plan_summary.txt
    fi
    
    echo "Piano dettagliato:"
    cat plan_human.txt
    
    echo "Riassunto del piano:"
    cat plan_summary.txt
    
    # Verifica se ci sono risorse da modificare
    if [ -s plan.json ]; then
      RESOURCES_COUNT=$(jq '.resource_changes | length' plan.json 2>/dev/null)
      if [ "$RESOURCES_COUNT" = "0" ] || [ "$RESOURCES_COUNT" = "null" ] || [ -z "$RESOURCES_COUNT" ]; then
        echo "ATTENZIONE: Nessuna risorsa da modificare nel piano!"
        
        # Esamina il file main.tf per verificare la configurazione
        echo "Contenuto di main.tf:"
        cat main.tf || echo "File main.tf non trovato"
        
        # Verifica le variabili impostate
        echo "Variabili TF_VAR impostate:"
        env | grep TF_VAR || echo "Nessuna variabile TF_VAR trovata"
      else
        echo "Piano contiene $RESOURCES_COUNT risorse da modificare"
      fi
    else
      echo "ATTENZIONE: File piano JSON vuoto o non valido!"
    fi
  artifacts:
    paths:
      - ${TOFU_DIR}/plan.tfplan
      - ${TOFU_DIR}/plan.json
      - ${TOFU_DIR}/plan_summary.txt
      - ${TOFU_DIR}/plan_human.txt
    expire_in: 1 week
    reports:
      terraform: ${TOFU_DIR}/plan.json
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: on_success

# Applicazione modifiche
tofu-apply:
  extends: .tofu_base
  stage: apply
  script: |
    # Verifica che il file del piano esista
    if [ ! -f plan.tfplan ]; then
      echo "File del piano non trovato! Esegui prima il job plan."
      exit 1
    fi
    
    # Verifica se ci sono risorse nel piano
    if [ -s plan.json ]; then
      RESOURCES_COUNT=$(jq '.resource_changes | length' plan.json 2>/dev/null)
      if [ "$RESOURCES_COUNT" = "0" ] || [ "$RESOURCES_COUNT" = "null" ] || [ -z "$RESOURCES_COUNT" ]; then
        echo "ATTENZIONE: Nessuna risorsa da applicare nel piano!"
        echo "Contenuto del piano:"
        tofu show plan.tfplan
        echo "Debug delle variabili:"
        env | grep TF_VAR
        
        # Continue anyway for debugging
        echo "Continuando comunque per debug..."
      else
        echo "Piano contiene $RESOURCES_COUNT risorse da applicare"
      fi
    else
      echo "ATTENZIONE: File piano JSON vuoto o non valido!"
      echo "Continuando comunque per debug..."
    fi
    
    echo "Applicazione del piano esistente..."
    # Utilizzando il project access token per l'autenticazione
    tofu apply -auto-approve -lock=false plan.tfplan
    
    echo "Salvando output..."
    tofu output -json > terraform_output.json
  artifacts:
    paths:
      - ${TOFU_DIR}/terraform_output.json
    reports:
      terraform: ${TOFU_DIR}/terraform_output.json
  dependencies:
    - tofu-plan
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: on_success

# Pulizia cache - automatico dopo apply riuscito
tofu-cleanup:
  stage: cleanup
  image: ${ALPINE_IMAGE}
  script: |
    if [ -d "${TOFU_DIR}/.terraform" ]; then
      rm -rf ${TOFU_DIR}/.terraform
      echo "Pulizia cache OpenTofu completata"
    else
      echo "Nessuna cache OpenTofu da pulire"
    fi
  dependencies:
    - tofu-apply
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: on_success
  cache:
    key: ${CI_COMMIT_REF_SLUG}-opentofu
    paths:
      - ${TOFU_DIR}/.terraform
    policy: pull
